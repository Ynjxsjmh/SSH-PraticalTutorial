#+OPTIONS: ':nil *:t -:t ::t <:t H:5 \n:nil ^:{} arch:headline
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:t toc:t todo:t |:t
#+TITLE: 四、Hibernate 联系人管理之项目实现
#+DATE: <2019-03-16 Sat>
#+AUTHOR: Ynjxsjmh
#+EMAIL: ynjxsjmh@gmail.com
#+FILETAGS: ::

* 需求
一个客户对应多个联系人，单独在联系人管理模块中对联系人信息进行维护，功能包括：添加联系人、修改联系人、删除联系人。
- 添加联系人：添加联系人时指定所属客户，添加信息包括联系人名称、联系电话等
- 修改联系人：允许修改联系人所属客户、联系人名称、联系人电话等信息
- 删除联系人：删除客户的同时删除下属的联系人，可以单独删除客户的某个联系人

https://raw.githubusercontent.com/Ynjxsjmh/ynjxsjmh.github.io/master/img/2019/2019-03-16-03-01.png

* 项目实现
** 创建表
*** 联系人表cst_linkman
#+BEGIN_SRC sql
CREATE TABLE `cst_linkman` (
  `lkm_id` bigint(32) NOT NULL AUTO_INCREMENT COMMENT '联系人编号(主键)',
  `lkm_name` varchar(16) DEFAULT NULL COMMENT '联系人姓名',
  `lkm_cust_id` bigint(32) NOT NULL COMMENT '客户id',
  `lkm_gender` char(1) DEFAULT NULL COMMENT '联系人性别',
  `lkm_phone` varchar(16) DEFAULT NULL COMMENT '联系人办公电话',
  `lkm_mobile` varchar(16) DEFAULT NULL COMMENT '联系人手机',
  `lkm_email` varchar(64) DEFAULT NULL COMMENT '联系人邮箱',
  `lkm_qq` varchar(16) DEFAULT NULL COMMENT '联系人qq',
  `lkm_position` varchar(16) DEFAULT NULL COMMENT '联系人职位',
  `lkm_memo` varchar(512) DEFAULT NULL COMMENT '联系人备注',
  PRIMARY KEY (`lkm_id`),
  KEY `FK_cst_linkman_lkm_cust_id` (`lkm_cust_id`),
  CONSTRAINT `FK_cst_linkman_lkm_cust_id` FOREIGN KEY (`lkm_cust_id`) REFERENCES `cst_customer` (`cust_id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8; 
#+END_SRC

*** 系统用户表sys_user
#+BEGIN_SRC sql
CREATE TABLE `sys_user` (
  `user_id` bigint(32) NOT NULL AUTO_INCREMENT COMMENT '用户id',
  `user_code` varchar(32) NOT NULL COMMENT '用户账号',
  `user_name` varchar(64) NOT NULL COMMENT '用户名称',
  `user_password` varchar(32) NOT NULL COMMENT '用户密码',
  `user_state` char(1) NOT NULL COMMENT '1:正常,0:暂停',
  PRIMARY KEY (`user_id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;

/*Data for the table `sys_user` */

LOCK TABLES `sys_user` WRITE;

insert  into `sys_user`(`user_id`,`user_code`,`user_name`,`user_password`,`user_state`) values (5,'m0003','小军','123','1'),(6,'m0001','小红','123','1'),(7,'m0001','小明','123','1'),(8,'m0001','小红','123','1');

UNLOCK TABLES;
#+END_SRC

*** 系统角色表sys_role
#+BEGIN_SRC sql
CREATE TABLE `sys_role` (
  `role_id` bigint(32) NOT NULL AUTO_INCREMENT,
  `role_name` varchar(32) NOT NULL COMMENT '角色名称',
  `role_memo` varchar(128) DEFAULT NULL COMMENT '备注',
  PRIMARY KEY (`role_id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

/*Data for the table `sys_role` */

LOCK TABLES `sys_role` WRITE;

insert  into `sys_role`(`role_id`,`role_name`,`role_memo`) values (1,'员工',NULL),(2,'部门经理',NULL),(3,'部门经理',NULL),(4,'部门经理',NULL),(5,'员工',NULL);

UNLOCK TABLES;
#+END_SRC

** 创建实体类
客户与联系人是一对多的关系
*** Customer.java
#+BEGIN_SRC java
package com.atcast.domain;
import java.util.HashSet;
import java.util.Set;
/**
 * 客户的JavaBean
 * 一方
 * @author Administrator
 */
public class Customer {
    private Long cust_id;
    private String cust_name;
    private Long cust_user_id;
    private Long cust_create_id;
    private String cust_source;
    private String cust_industry;
    private String cust_level;
    private String cust_linkman;
    private String cust_phone;
    private String cust_mobile;
    // Hibernate框架默认的集合是set集合，集合必须要自己手动的初始化
    private Set<Linkman> linkmans = new HashSet<Linkman>();
    public Long getCust_id() {
        return cust_id;
    }
    public void setCust_id(Long cust_id) {
        this.cust_id = cust_id;
    }
    public String getCust_name() {
        return cust_name;
    }
    public void setCust_name(String cust_name) {
        this.cust_name = cust_name;
    }
    public Long getCust_user_id() {
        return cust_user_id;
    }
    public void setCust_user_id(Long cust_user_id) {
        this.cust_user_id = cust_user_id;
    }
    public Long getCust_create_id() {
        return cust_create_id;
    }
    public void setCust_create_id(Long cust_create_id) {
        this.cust_create_id = cust_create_id;
    }
    public String getCust_source() {
        return cust_source;
    }
    public void setCust_source(String cust_source) {
        this.cust_source = cust_source;
    }
    public String getCust_industry() {
        return cust_industry;
    }
    public void setCust_industry(String cust_industry) {
        this.cust_industry = cust_industry;
    }
    public String getCust_level() {
        return cust_level;
    }
    public void setCust_level(String cust_level) {
        this.cust_level = cust_level;
    }
    public String getCust_linkman() {
        return cust_linkman;
    }
    public void setCust_linkman(String cust_linkman) {
        this.cust_linkman = cust_linkman;
    }
    public String getCust_phone() {
        return cust_phone;
    }
    public void setCust_phone(String cust_phone) {
        this.cust_phone = cust_phone;
    }
    public String getCust_mobile() {
        return cust_mobile;
    }
    public void setCust_mobile(String cust_mobile) {
        this.cust_mobile = cust_mobile;
    }
    public Set<Linkman> getLinkmans() {
        return linkmans;
    }
    public void setLinkmans(Set<Linkman> linkmans) {
        this.linkmans = linkmans;
    }
}
#+END_SRC
*** Linkman.java
#+BEGIN_SRC java
package com.atcast.domain;
/**
 * 客户的联系人
 * 多方
 * @author Administrator
 */
public class Linkman {
    private Long lkm_id;
    private String lkm_name;
    private String lkm_gender;
    private String lkm_phone;
    private String lkm_mobile;
    private String lkm_email;
    private String lkm_qq;
    private String lkm_position;
    private String lkm_memo;
    // 编写一个对象，不要自己new
    private Customer customer;

    public Long getLkm_id() {
        return lkm_id;
    }
    public void setLkm_id(Long lkm_id) {
        this.lkm_id = lkm_id;
    }
    public String getLkm_name() {
        return lkm_name;
    }
    public void setLkm_name(String lkm_name) {
        this.lkm_name = lkm_name;
    }
    public String getLkm_gender() {
        return lkm_gender;
    }
    public void setLkm_gender(String lkm_gender) {
        this.lkm_gender = lkm_gender;
    }
    public String getLkm_phone() {
        return lkm_phone;
    }
    public void setLkm_phone(String lkm_phone) {
        this.lkm_phone = lkm_phone;
    }
    public String getLkm_mobile() {
        return lkm_mobile;
    }
    public void setLkm_mobile(String lkm_mobile) {
        this.lkm_mobile = lkm_mobile;
    }
    public String getLkm_email() {
        return lkm_email;
    }
    public void setLkm_email(String lkm_email) {
        this.lkm_email = lkm_email;
    }
    public String getLkm_qq() {
        return lkm_qq;
    }
    public void setLkm_qq(String lkm_qq) {
        this.lkm_qq = lkm_qq;
    }
    public String getLkm_position() {
        return lkm_position;
    }
    public void setLkm_position(String lkm_position) {
        this.lkm_position = lkm_position;
    }
    public String getLkm_memo() {
        return lkm_memo;
    }
    public void setLkm_memo(String lkm_memo) {
        this.lkm_memo = lkm_memo;
    }
    public Customer getCustomer() {
        return customer;
    }
    public void setCustomer(Customer customer) {
        this.customer = customer;
    }
}
#+END_SRC

用户与角色是多对多的关系
*** User.java
#+BEGIN_SRC java
package com.atcast.domain;
import java.util.HashSet;
import java.util.Set;
/**
 * 系统用户
 * @author Administrator
 */
public class User {
    private Long uid;
    private String username;
    private String password;
    
    // 编写都是集合
    private Set<Role> roles = new HashSet<Role>();
    
    public Long getUid() {
        return uid;
    }
    public void setUid(Long uid) {
        this.uid = uid;
    }
    public String getUsername() {
        return username;
    }
    public void setUsername(String username) {
        this.username = username;
    }
    public String getPassword() {
        return password;
    }
    public void setPassword(String password) {
        this.password = password;
    }
    public Set<Role> getRoles() {
        return roles;
    }
    public void setRoles(Set<Role> roles) {
        this.roles = roles;
    }
}
#+END_SRC
*** Role.java
#+BEGIN_SRC java
package com.atcast.domain;
import java.util.HashSet;
import java.util.Set;
/**
 * 系统角色
 * @author Administrator
 */
public class Role {
    private Long rid;
    private String rname;
    
    private Set<User> users = new HashSet<User>();
    
    public Long getRid() {
        return rid;
    }
    public void setRid(Long rid) {
        this.rid = rid;
    }
    public String getRname() {
        return rname;
    }
    public void setRname(String rname) {
        this.rname = rname;
    }
    public Set<User> getUsers() {
        return users;
    }
    public void setUsers(Set<User> users) {
        this.users = users;
    }
}
#+END_SRC
** 创建实体与表的映射关系
*** Customer.hbm.xml
#+BEGIN_SRC nxml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC 
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
    "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
    
    <class name="com.atcast.domain.Customer" table="cst_customer">
        <id name="cust_id" column="cust_id">
            <generator class="native"/>
        </id>
        
        <property name="cust_name" column="cust_name"/>
        <property name="cust_user_id" column="cust_user_id"/>
        <property name="cust_create_id" column="cust_create_id"/>
        <property name="cust_source" column="cust_source"/>
        <property name="cust_industry" column="cust_industry"/>
        <property name="cust_level" column="cust_level"/>
        <property name="cust_linkman" column="cust_linkman"/>
        <property name="cust_phone" column="cust_phone"/>
        <property name="cust_mobile" column="cust_mobile"/>
        
        <!-- 配置一方 -->
        <!--
            set标签name属性：表示集合的名称
        -->
        <set name="linkmans" inverse="true">
            <!-- 需要出现子标签 -->
            <!-- 外键的字段 -->
            <key column="lkm_cust_id"/>
            <one-to-many class="com.atcast.domain.Linkman"/>
        </set>
    </class>
</hibernate-mapping>
#+END_SRC
*** Linkman.hbm.xml
#+BEGIN_SRC nxml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC 
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
    "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
    
    <class name="com.atcast.domain.Linkman" table="cst_linkman">
        <id name="lkm_id" column="lkm_id">
            <generator class="native"/>
        </id>
    
        <property name="lkm_name" column="lkm_name"/>
        <property name="lkm_gender" column="lkm_gender"/>
        <property name="lkm_phone" column="lkm_phone"/>
        <property name="lkm_mobile" column="lkm_mobile"/>
        <property name="lkm_email" column="lkm_email"/>
        <property name="lkm_qq" column="lkm_qq"/>
        <property name="lkm_position" column="lkm_position"/>
        <property name="lkm_memo" column="lkm_memo"/>
        
        <!-- 先配置多方 
            name    当前JavaBean中的属性
            class   属性的全路径
            column  外键的字段
        -->
        <many-to-one name="customer" class="com.atcast.domain.Customer" column="lkm_cust_id" cascade="save-update"/>
    </class>
</hibernate-mapping>
#+END_SRC
*** User.hbm.xml
#+BEGIN_SRC nxml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC 
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
    "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
    
    <class name="com.atcast.domain.User" table="sys_user">
        <id name="uid" column="uid">
            <generator class="native"/>
        </id>
        
        <property name="username" column="username"/>
        <property name="password" column="password"/>
        
        <!-- 配置多对多 
            name    集合的名称
            table   中间表的名称
        -->
        <set name="roles" table="sys_user_role" cascade="save-update">
            <!-- 当前对象在中间表的外键的名称 -->
            <key column="uid"/>
            <!--
                class   集合中存入对象，对象的全路径
                column  集合中对象在中间表的外键的名称
            -->
            <many-to-many class="com.atcast.domain.Role" column="rid"/>
        </set>
    </class>
</hibernate-mapping>
#+END_SRC
*** Role.hbm.xml
#+BEGIN_SRC nxml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC 
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
    "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
    
    <class name="com.atcast.domain.Role" table="sys_role">
        <id name="rid" column="rid">
            <generator class="native"/>
        </id>
        <property name="rname" column="rname"/>
        
        <!-- 多对多必须要有一方放弃外键的维护的 -->
        <set name="users" table="sys_user_role" inverse="true">
            <key column="rid"/>
            <many-to-many class="com.atcast.domain.User" column="uid"/>
        </set>
    </class>
</hibernate-mapping>
#+END_SRC
** 创建Hibernate的核心配置文件
hibernate.cfg.xml
#+BEGIN_SRC nxml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
    "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
    "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
    
<hibernate-configuration>
    <!-- 记住：先配置SessionFactory标签，一个数据库对应一个SessionFactory标签 -->
    <session-factory>
        <!-- 必须要配置的参数有5个，4大参数，数据库的方言 -->
        <property name="hibernate.connection.driver_class">com.mysql.jdbc.Driver</property>
        <property name="hibernate.connection.url">jdbc:mysql:///crm</property>
        <property name="hibernate.connection.username">root</property>
        <property name="hibernate.connection.password">root</property>
        
        <!-- 数据库的方言 -->
        <property name="hibernate.dialect">org.hibernate.dialect.MySQLDialect</property>
        
        <!-- 可选配置 -->
        <!-- 显示SQL语句，在控制台显示 -->
        <property name="hibernate.show_sql">true</property>
        <!-- 格式化SQL语句 -->
        <property name="hibernate.format_sql">true</property>
        <!-- 生成数据库的表结构 
    update：如果没有表结构，创建表结构。如果存在，不会创建，添加数据
        -->
        <property name="hibernate.hbm2ddl.auto">update</property>
        
        <!-- 设置数据库的隔离级别，就使用默认值就OK 
        <property name="hibernate.connection.isolation">4</property>
        -->
        
        <!-- 开启绑定本地的session -->
        <property name="hibernate.current_session_context_class">thread</property>
        <!-- 映射配置文件，需要引入映射的配置文件   -->
        <mapping resource="com/atcast/domain/Customer.hbm.xml"/>
        <mapping resource="com/atcast/domain/Linkman.hbm.xml"/>
        <mapping resource="com/atcast/domain/User.hbm.xml"/>
        <mapping resource="com/atcast/domain/Role.hbm.xml"/>
    </session-factory>
</hibernate-configuration>
#+END_SRC
** 编写Hibernate工具类
HibernateUtils.java
#+BEGIN_SRC java
package com.atcast.utils;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

/**
 * Hibernate框架的工具类
 * @author Administrator
 */
public class HibernateUtils {
    
    // ctrl + shift + x
    private static final Configuration CONFIG;
    private static final SessionFactory FACTORY;
    
    // 编写静态代码块
    static{
        // 加载XML的配置文件
        CONFIG = new Configuration().configure();
        // 构造工厂
        FACTORY = CONFIG.buildSessionFactory();
    }
    
    /**
     * 从工厂中获取Session对象
     * @return
     */
    public static Session getSession(){
        return FACTORY.openSession();
    }
    
    /**
     * // 从ThreadLocal类中获取到session的对象
     * @return
     */
    public static Session getCurrentSession(){
        return FACTORY.getCurrentSession();
    }
    
    public static void main(String[] args) {
        // 调用获取session的方法
        getSession();
    }
}
#+END_SRC
** 测试类
*** Demo1.java 测试客户和联系人
#+BEGIN_SRC java
package com.atcast.test;

import org.hibernate.Session;
import org.hibernate.Transaction;
import org.junit.Test;
import com.atcast.domain.Customer;
import com.atcast.domain.Linkman;
import com.atcast.utils.HibernateUtils;
/**
 * 测试一对多
 * @author Administrator
 */
public class Demo1 {
    /**
     * cascade和inverse的区别
     */
    @Test
    public void run12(){
        Session session = HibernateUtils.getCurrentSession();
        Transaction tr = session.beginTransaction();
        
        // 级联保存
        Customer c1 = new Customer();
        c1.setCust_name("美美");
        
        // 创建2个联系人
        Linkman l1 = new Linkman();
        l1.setLkm_name("熊大");
        Linkman l2 = new Linkman();
        l2.setLkm_name("熊二");
        
        l1.setCustomer(c1);
        l2.setCustomer(c1);
        
        session.save(l1);
        session.save(l2);
        
        // 不用修改
        tr.commit();
    }
    
    /**
     * 放弃外键的维护
     * 需求：让熊大联系人属于小风客户
     */
    @Test
    public void run11(){
        Session session = HibernateUtils.getCurrentSession();
        Transaction tr = session.beginTransaction();
        
        // 先获取到小风的客户
        Customer c2 = session.get(Customer.class, 2L);
        Linkman l1 = session.get(Linkman.class, 1L);
        
        // 做双向的关联
        c2.getLinkmans().add(l1);
        
        l1.setCustomer(c2);
        // 不用修改
        tr.commit();
    }
    
    /**
     * 解除关系：从集合中删除联系人
     */
    @Test
    public void run10(){
        Session session = HibernateUtils.getCurrentSession();
        Transaction tr = session.beginTransaction();
        // 先获取到客户
        Customer c1 = session.get(Customer.class, 1L);
        Linkman l1 = session.get(Linkman.class, 1L);
        // 解除
        c1.getLinkmans().remove(l1);
        tr.commit();
    }
    
    /**
     * 测试级联删除
     */
    @Test
    public void run9(){
        Session session = HibernateUtils.getCurrentSession();
        Transaction tr = session.beginTransaction();
        Linkman man = session.get(Linkman.class, 1L);
        session.delete(man);
        tr.commit();
    }
    
    /**
     * 删除联系人，级联删除客户
     */
    @Test
    public void run8(){
        Session session = HibernateUtils.getCurrentSession();
        Transaction tr = session.beginTransaction();
        
        Linkman man = session.get(Linkman.class, 1L);
        session.delete(man);
        
        tr.commit();
    }
    
    /**
     * 测试级联删除，删除客户，级联删除客户下的联系人
     */
    @Test
    public void run7(){
        Session session = HibernateUtils.getCurrentSession();
        Transaction tr = session.beginTransaction();
        // 先查询1号客户
        Customer c1 = session.get(Customer.class, 1L);
        session.delete(c1);
        tr.commit();
    }
    
    /**
     * 测试：删除客户，客户下有2个联系人
     */
    @Test
    public void run6(){
        Session session = HibernateUtils.getCurrentSession();
        Transaction tr = session.beginTransaction();
        // 先查询1号客户
        Customer c1 = session.get(Customer.class, 1L);
        session.delete(c1);
        
        tr.commit();
    }
    
    
    /**
     * 测试级联保存
     */
    @Test
    public void run5(){
        Session session = HibernateUtils.getCurrentSession();
        Transaction tr = session.beginTransaction();
        // 保存客户和联系人的数据
        Customer c1 = new Customer();
        c1.setCust_name("美美");
        
        // 创建2个联系人
        Linkman l1 = new Linkman();
        l1.setLkm_name("熊大");
        Linkman l2 = new Linkman();
        l2.setLkm_name("熊二");
        
        l1.setCustomer(c1);
        c1.getLinkmans().add(l2);
        session.save(l1);
        
        tr.commit();
    }
    
    /**
     * 级联保存：保存联系人，级联客户
     */
    @Test
    public void run4(){
        Session session = HibernateUtils.getCurrentSession();
        Transaction tr = session.beginTransaction();
        // 保存客户和联系人的数据
        Customer c1 = new Customer();
        c1.setCust_name("美美");
        
        // 创建2个联系人
        Linkman l1 = new Linkman();
        l1.setLkm_name("熊大");
        Linkman l2 = new Linkman();
        l2.setLkm_name("熊二");
        
        // 使用联系人关联客户
        l1.setCustomer(c1);
        l2.setCustomer(c1);
        
        // 保存
        session.save(l1);
        // 没有保存2个联系人
        session.save(l2);
        
        tr.commit();
    }
    
    /**
     * 级联保存：保存客户，级联联系人
     */
    @Test
    public void run3(){
        Session session = HibernateUtils.getCurrentSession();
        Transaction tr = session.beginTransaction();
        // 保存客户和联系人的数据
        Customer c1 = new Customer();
        c1.setCust_name("美美");
        
        // 创建2个联系人
        Linkman l1 = new Linkman();
        l1.setLkm_name("熊大");
        Linkman l2 = new Linkman();
        l2.setLkm_name("熊二");
        
        // 单向关联
        c1.getLinkmans().add(l1);
        c1.getLinkmans().add(l2);
        
        // 保存数据
        session.save(c1);
        
        tr.commit();
    }
    
    /**
     * 单向的关联，如果不配置级联保存，程序出现异常
     */
    @Test
    public void run2(){
        Session session = HibernateUtils.getCurrentSession();
        Transaction tr = session.beginTransaction();
        // 保存客户和联系人的数据
        Customer c1 = new Customer();
        c1.setCust_name("美美");
        
        // 创建2个联系人
        Linkman l1 = new Linkman();
        l1.setLkm_name("熊大");
        Linkman l2 = new Linkman();
        l2.setLkm_name("熊二");
        
        // 单向关联
        c1.getLinkmans().add(l1);
        c1.getLinkmans().add(l2);
        
        // 保存数据
        session.save(c1);
        
        tr.commit();
    }
    
    /**
     * 最麻烦的双向关联的方式，保存数据
     */
    @Test
    public void run1(){
        Session session = HibernateUtils.getCurrentSession();
        Transaction tr = session.beginTransaction();
        // 保存客户和联系人的数据
        Customer c1 = new Customer();
        c1.setCust_name("美美");
        
        // 创建2个联系人
        Linkman l1 = new Linkman();
        l1.setLkm_name("熊大");
        Linkman l2 = new Linkman();
        l2.setLkm_name("熊二");
        
        // 演示双向关联
        c1.getLinkmans().add(l1);
        c1.getLinkmans().add(l2);
        
        l1.setCustomer(c1);
        l2.setCustomer(c1);
        
        // 保存数据
        session.save(c1);
        session.save(l1);
        session.save(l2);
    
        tr.commit();
    }
}
#+END_SRC
*** Demo2.java 测试用户和角色
#+BEGIN_SRC java
package com.atcast.test;

import org.hibernate.Session;
import org.hibernate.Transaction;
import org.junit.Test;

import com.atcast.domain.Role;
import com.atcast.domain.User;
import com.atcast.utils.HibernateUtils;

/**
 * 多对多的测试
 * @author Administrator
 */
public class Demo2 {
    
    /**
     * 现在：张三用户，有2个角色，经理和演员
     * 让张三没有演员角色
     */
    @Test
    public void run3(){
        Session session = HibernateUtils.getCurrentSession();
        Transaction tr = session.beginTransaction();
        // 查询张三用户
        User u1 = session.get(User.class, 1L);
        // 查询角色
        Role r2 = session.get(Role.class, 2L);
        u1.getRoles().remove(r2);
        tr.commit();
    }
    
    /**
     * 级联保存
     */
    @Test
    public void run2(){
        Session session = HibernateUtils.getCurrentSession();
        Transaction tr = session.beginTransaction();
        // 模拟多对多，双向的关联
        User u1 = new User();
        u1.setUsername("张三");
        User u2 = new User();
        u2.setUsername("赵四");
        
        // 创建角色
        Role r1 = new Role();
        r1.setRname("经理");
        Role r2 = new Role();
        r2.setRname("演员");
        
        u1.getRoles().add(r1);
        u1.getRoles().add(r2);
        u2.getRoles().add(r1);
        
        // 保存数据
        session.save(u1);
        session.save(u2);
        
        tr.commit();
    }
    
    @Test
    public void run1(){
        Session session = HibernateUtils.getCurrentSession();
        Transaction tr = session.beginTransaction();
        // 模拟多对多，双向的关联
        User u1 = new User();
        u1.setUsername("张三");
        User u2 = new User();
        u2.setUsername("赵四");
        
        // 创建角色
        Role r1 = new Role();
        r1.setRname("经理");
        Role r2 = new Role();
        r2.setRname("演员");
        
        // 关联
        u1.getRoles().add(r1);
        u1.getRoles().add(r2);
        r1.getUsers().add(u1);
        r2.getUsers().add(u1);
        
        u2.getRoles().add(r1);
        r1.getUsers().add(u2);
        
        session.save(u1);
        session.save(u2);
        session.save(r1);
        session.save(r2);
        
        tr.commit();
    }
}
#+END_SRC
** DAO层
*** CustomerDao.java
#+BEGIN_SRC java
package com.atcast.dao;
import java.util.List;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.Restrictions;

import com.atcast.domain.Customer;
import com.atcast.utils.HibernateUtils;

public class CustomerDao {
    /**
     * 保存客户
     * @param c
     */
    public void save(Customer c){
        // 先获取session
        Session session = HibernateUtils.getSession();
        // 开启事务
        Transaction tr = session.beginTransaction();
        // 保存用户
        session.save(c);
        // 提交事务
        tr.commit();
        // 关闭资源
        session.close();
    }
    /**
     * 查询所有的客户
     * @return
     */
    public List<Customer> findAll(){
        // QBC查询
        Session session = HibernateUtils.getSession();
        Transaction tr = session.beginTransaction();
        // 查询
        Criteria criteria = session.createCriteria(Customer.class);
        // 查询
        List<Customer> list = criteria.list();
        tr.commit();
        session.close();
        return list;
    }
    /**
     * 带查询条件的查询所有的客户
     * @return
     */
    public List<Customer> findAll(String custName){
        // QBC查询
        Session session = HibernateUtils.getSession();
        Transaction tr = session.beginTransaction();
        // 查询
        Criteria criteria = session.createCriteria(Customer.class);
        
        // 添加查询的条件
        if(custName != null && !custName.trim().isEmpty()){
            // 添加查询的条件
            criteria.add(Restrictions.like("cust_name", "%"+custName+"%"));
        }
        
        // 查询
        List<Customer> list = criteria.list();
        tr.commit();
        session.close();
        return list;
    }
    
    /**
     * 通过主键，查询客户
     * @param cust_id
     * @return
     */
    public Customer findById(Long cust_id) {
        // 使用session
        Session session = HibernateUtils.getCurrentSession();
        // 查询
        return session.get(Customer.class, cust_id);
    }
}
#+END_SRC
*** LinkmanDao.java
#+BEGIN_SRC java
package com.atcast.dao;

import org.hibernate.Session;
import com.atcast.domain.Linkman;
import com.atcast.utils.HibernateUtils;

public class LinkmanDao {
    /**
     * 保存联系人
     * @param man
     */
    public void save(Linkman man){
        Session session = HibernateUtils.getCurrentSession();
        session.save(man);
    }
}
#+END_SRC
** 业务层
*** CustomerService.java
#+BEGIN_SRC java
package com.atcast.service;
import java.util.List;
import com.atcast.dao.CustomerDao;
import com.atcast.domain.Customer;
public class CustomerService {
    /**
     * 保存客户
     * @param c
     */
    public void saveCustomer(Customer c){
        new CustomerDao().save(c);
    }
    
    /**
     * 查询所有的客户
     * @return
     */
    public List<Customer> findAll(){
        return new CustomerDao().findAll();
    }

    /**
     * 带查询条件查询所有的客户
     * @return
     */
    public List<Customer> findAll(String custName){
        return new CustomerDao().findAll(custName);
    }
}
#+END_SRC
*** LinkmanService.java
#+BEGIN_SRC java
package com.atcast.service;

import org.hibernate.Session;
import org.hibernate.Transaction;
import com.atcast.dao.CustomerDao;
import com.atcast.dao.LinkmanDao;
import com.atcast.domain.Customer;
import com.atcast.domain.Linkman;
import com.atcast.utils.HibernateUtils;

public class LinkmanService {
    /**
     * 编写业务，保存联系人
     * 先把客户查询出来，设置到联系人中，再保存联系人
     * @param man
     * @param cust_id
     */
    public void save(Linkman man, Long cust_id) {
        // 先获取session
        Session session = HibernateUtils.getCurrentSession();
        // 开启事务
        Transaction tr = session.beginTransaction();
        try {
            // 编写代码
            // 先查客户
            Customer c = new CustomerDao().findById(cust_id);
            // 设置
            man.setCustomer(c);
            // 保存联系人
            new LinkmanDao().save(man);
            
            tr.commit();
        } catch (Exception e) {
            tr.rollback();
            e.printStackTrace();
        }
    }
}
#+END_SRC
** 控制层
*** InitAdd.java
#+BEGIN_SRC java
package com.atcast.servlet;

import java.io.IOException;
import java.util.List;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import com.atcast.domain.Customer;
import com.atcast.service.CustomerService;
/**
 * 初始化到添加联系人的页面
 * @author Administrator
 */
public class InitAdd extends HttpServlet {
    private static final long serialVersionUID = 1L;
    /**
     * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
     */
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        // 查询所有的客户
        List<Customer> list = new CustomerService().findAll();
        // 保存request
        request.setAttribute("list", list);
        request.getRequestDispatcher("/jsp/linkman/add.jsp").forward(request, response);
    }
    /**
     * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
     */
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        // TODO Auto-generated method stub
        doGet(request, response);
    }
}
#+END_SRC

*** AddLinkman.java
#+BEGIN_SRC java
package com.atcast.servlet;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.util.Map;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.commons.beanutils.BeanUtils;
import com.atcast.domain.Linkman;
import com.atcast.service.LinkmanService;

/**
 * 添加联系人
 * @author Administrator
 */
public class AddLinkman extends HttpServlet {
    
    private static final long serialVersionUID = 1L;

    /**
     * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
     */
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        // 先解决中文乱码
        request.setCharacterEncoding("UTF-8");
        // 接收数据
        Map<String, String[]> map = request.getParameterMap();
        // 先把客户的id获取到
        String scust_id = map.get("cust_id")[0];
        // 转换
        Long cust_id = Long.parseLong(scust_id);
        
        // 可以封装数据了
        Linkman man = new Linkman();
        try {
            // 封装数据
            BeanUtils.populate(man, map);
            
            // 调用业务层，保存联系人
            new LinkmanService().save(man,cust_id);
            
            System.out.println("保存联系人成功了...");
        } catch (Exception e) {
            e.printStackTrace();
        }       
    }
    /**
     * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
     */
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        // TODO Auto-generated method stub
        doGet(request, response);
    }
}
#+END_SRC

** web.xml
#+BEGIN_SRC nxml
 <?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" id="WebApp_ID" version="2.5">
  <display-name>day30</display-name>
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.htm</welcome-file>
    <welcome-file>default.jsp</welcome-file>
  </welcome-file-list>
  <servlet>
    <description></description>
    <display-name>InitAdd</display-name>
    <servlet-name>InitAdd</servlet-name>
    <servlet-class>com.atcast.servlet.InitAdd</servlet-class>
  </servlet>
  <servlet-mapping>
    <servlet-name>InitAdd</servlet-name>
    <url-pattern>/initAdd</url-pattern>
  </servlet-mapping>
  <servlet>
    <description></description>
    <display-name>AddLinkman</display-name>
    <servlet-name>AddLinkman</servlet-name>
    <servlet-class>com.atcast.servlet.AddLinkman</servlet-class>
  </servlet>
  <servlet-mapping>
    <servlet-name>AddLinkman</servlet-name>
    <url-pattern>/addLinkman</url-pattern>
  </servlet-mapping>
</web-app>
#+END_SRC

** 增加联系人页面
add.jsp
#+BEGIN_SRC html
 <%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<TITLE>添加联系人</TITLE> 
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<LINK href="${pageContext.request.contextPath }/css/Style.css" type=text/css rel=stylesheet>
<LINK href="${pageContext.request.contextPath }/css/Manage.css" type=text/css
    rel=stylesheet>
<META content="MSHTML 6.00.2900.3492" name=GENERATOR>
</HEAD>
<BODY>  
    <FORM id=form1 name=form1 action="${pageContext.request.contextPath }/addLinkman" method=post>
        <TABLE cellSpacing=0 cellPadding=0 width="98%" border=0>
            <TBODY>
                <TR>
                    <TD width=15><IMG src="${pageContext.request.contextPath }/images/new_019.jpg"
                        border=0></TD>
                    <TD width="100%" background="${pageContext.request.contextPath }/images/new_020.jpg"
                         height=20></TD>
                    <TD width=15><IMG src="${pageContext.request.contextPath }/images/new_021.jpg"
                        border=0></TD>
                </TR>
            </TBODY>
        </TABLE>
        <TABLE cellSpacing=0 cellPadding=0 width="98%" border=0>
            <TBODY>
                <TR>
                    <TD width=15 background=${pageContext.request.contextPath }/images/new_022.jpg><IMG
                        src="${pageContext.request.contextPath }/images/new_022.jpg" border=0></TD>
                    <TD vAlign=top width="100%" bgColor=#ffffff>
                        <TABLE cellSpacing=0 cellPadding=5 width="100%" border=0>
                            <TR>
<TD class=manageHead>当前位置：联系人管理 &gt; 添加联系人</TD>
                            </TR>
                            <TR>
                                <TD height=2></TD>
                            </TR>
                        </TABLE>
                    <TABLE cellSpacing=0 cellPadding=5  border=0>
                            <tr>
                                <td>所属客户：</td>
                                <td colspan="3">
                                    <!-- 下拉选择框 -->
                                    <select name="cust_id">
                <c:forEach var="c" items="${ list }">
<option value="${ c.cust_id }">${ c.cust_name }</option>
                                        </c:forEach>
                                    </select>
                                </td>
                            </tr>
                            <TR>
                                <td>联系人名称：</td>
                                <td>
        <INPUT class=textbox id=sChannel2
        style="WIDTH: 180px" maxLength=50 name="lkm_name">
                                </td>
                                <td>联系人性别：</td>
                                <td>
                                <input type="radio" value="男" name="lkm_gender" checked="checked">男
    <input type="radio" value="女" name="lkm_gender">女
                                </td>
                            </TR>
                            <TR>
                                <td>联系人办公电话 ：</td>
                                <td>
                                <INPUT class=textbox id=sChannel2
                                                        style="WIDTH: 180px" maxLength=50 name="lkm_phone">
                                </td>
                                <td>联系人手机 ：</td>
                                <td>
                                <INPUT class=textbox id=sChannel2
                                                        style="WIDTH: 180px" maxLength=50 name="lkm_mobile">
                                </td>
                            </TR>
                            <tr>
                                <td rowspan=2>
                    <INPUT class=button id=sButton2 type=submit
                    value="保存 " name=sButton2>
                                </td>
                            </tr>
                        </TABLE>
                    
                    </TD>
                    <TD width=15 background="${pageContext.request.contextPath }/images/new_023.jpg">
                    <IMG src="${pageContext.request.contextPath }/images/new_023.jpg" border=0></TD>
                </TR>
            </TBODY>
        </TABLE>
        <TABLE cellSpacing=0 cellPadding=0 width="98%" border=0>
            <TBODY>
                <TR>
                    <TD width=15><IMG src="${pageContext.request.contextPath }/images/new_024.jpg"
                        border=0></TD>
                    <TD align=middle width="100%"
                        background="${pageContext.request.contextPath }/images/new_025.jpg" height=15></TD>
                    <TD width=15><IMG src="${pageContext.request.contextPath }/images/new_026.jpg"
                        border=0></TD>
                </TR>
            </TBODY>
        </TABLE>
    </FORM>
</BODY>
</HTML>
#+END_SRC

本章源码见 =HibernateCRM03=