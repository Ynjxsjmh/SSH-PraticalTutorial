#+OPTIONS: ':nil *:t -:t ::t <:t H:5 \n:nil ^:{} arch:headline
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:t toc:t todo:t |:t
#+TITLE: 十二、Spring 客户增加之项目实现
#+DATE: <2019-03-15 Tue>
#+AUTHOR: Ynjxsjmh
#+EMAIL: ynjxsjmh@gmail.com
#+FILETAGS: ::

* Table of Contents                                                     :TOC_5:QUOTE:
#+BEGIN_QUOTE
- [[#需求][需求]]
- [[#项目实现文件结构][项目实现文件结构]]
- [[#客户的dao层][客户的DAO层]]
- [[#客户的业务层][客户的业务层]]
- [[#增加客户页面][增加客户页面]]
- [[#webxml][web.xml]]
- [[#struts2配置文件][struts2配置文件]]
- [[#spring配置文件][spring配置文件]]
- [[#客户控制层][客户控制层]]
#+END_QUOTE

* 需求
使用Spring的IOC完成保存客户的操作:

https://raw.githubusercontent.com/Ynjxsjmh/ynjxsjmh.github.io/master/img/2019/2019-03-15-01-01.png

* 项目实现文件结构
https://raw.githubusercontent.com/Ynjxsjmh/ynjxsjmh.github.io/master/img/2019/2019-03-15-01-02.png

Spring 和项目整合的难点有两个：
- 所有对象的创建都交给 Spring 来处理。比如 Struts2 中 Action 的生成交给 Spring 处理;
- Hibernate 配置文件可以不要，交给 Spring 进行处理

* 客户的DAO层
CustomerDao
#+BEGIN_SRC java
package com.atcast.dao;
public interface CustomerDao {
    public void save();
}
#+END_SRC

CustomerDaoImpl.java
#+BEGIN_SRC java
package com.atcast.dao;
public class CustomerDaoImpl implements CustomerDao {
    public void save() {
        System.out.println("持久层：保存客户...");
    }
}
#+END_SRC

* 客户的业务层
CustomerService.java
#+BEGIN_SRC java
package com.atcast.service;
public interface CustomerService {
    public void save();
}
#+END_SRC

CustomerServiceImpl.java
#+BEGIN_SRC java
package com.atcast.service;
import com.atcast.dao.CustomerDao;
public class CustomerServiceImpl implements CustomerService {
    private CustomerDao customerDao;
    public void setCustomerDao(CustomerDao customerDao) {
        this.customerDao = customerDao;
    }
    
    public void save() {
        System.out.println("业务层：保存客户...");
        customerDao.save();
    }
}
#+END_SRC

* 增加客户页面
add.jsp
#+BEGIN_SRC jsp
<FORM id=form1 name=form1 action="${pageContext.request.contextPath }/customer_save.action" method=post> 
#+END_SRC

* web.xml
#+BEGIN_SRC nxml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" id="WebApp_ID" version="2.5">
  <display-name>day35_crm</display-name>
  <!-- 配置WEB整合的监听器 -->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  <!-- 加载方式：默认只能加载WEB-INF目录下的配置文件，提供配置方式，加载src目录下 -->
  <context-param>
    <param-name>contextConfigLocation</param-name>
  <param-value>classpath:applicationContext.xml</param-value>
  </context-param>
  
  <filter>
    <filter-name>struts2</filter-name>
    <filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>struts2</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.htm</welcome-file>
    <welcome-file>default.jsp</welcome-file>
  </welcome-file-list>
</web-app> 
#+END_SRC

* struts2配置文件
#+BEGIN_SRC nxml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE struts PUBLIC
    "-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"
    "http://struts.apache.org/dtds/struts-2.3.dtd">
<struts>
    <package name="crm" namespace="/" extends="struts-default">
        <!--  <action name="customer_*" class="com.atcast.web.action.CustomerAction" method="{1}"> --> customer_save
        <action name="customer_*" class="customerAction" method="{1}">
        </action>
    </package>
</struts>
#+END_SRC

* spring配置文件
applicationContext.xml
#+BEGIN_SRC nxml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
      http://www.springframework.org/schema/beans/spring-beans.xsd">
        <!-- 配置持久层 -->
    <bean id="customerDao" class="com.atcast.dao.CustomerDaoImpl"/>
    
    <!-- 配置客户的业务层 -->
    <bean id="customerService" class="com.atcast.service.CustomerServiceImpl">
        <property name="customerDao" ref="customerDao"/>
    </bean>
    
    <!-- 配置客户模块 -->
    <!-- 强调：以后配置Action，必须是多例的 -->
    <bean id="customerAction" class="com.atcast.web.action.CustomerAction" scope="prototype">
        <property name="customerService" ref="customerService"/>
    </bean>
</beans> 
#+END_SRC

* 客户控制层
CustomerAction.java
#+BEGIN_SRC java
package com.atcast.web.action;
import com.atcast.service.CustomerService;
import com.opensymphony.xwork2.ActionSupport;
/**
 * 客户的Action
 * @author Administrator
 */
public class CustomerAction extends ActionSupport{
    private static final long serialVersionUID = 113695314694166436L;
        // 提供service的成员属性，提供set方法
        private CustomerService customerService;
        public void setCustomerService(CustomerService customerService) {
            this.customerService = customerService;
        }
    /**
     * 保存客户
     * @return
     */
    public String save(){
        System.out.println("WEB层：保存客户...");
        customerService.save();
        return NONE;
    }
}
#+END_SRC

本章代码见 =SpringCRM01=