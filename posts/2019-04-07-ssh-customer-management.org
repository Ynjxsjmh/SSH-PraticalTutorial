#+OPTIONS: ':nil *:t -:t ::t <:t H:5 \n:nil ^:{} arch:headline
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:t toc:t todo:t |:t
#+TITLE: 十五、SSH 客户管理
#+DATE: <2019-04-07 Sun>
#+AUTHOR: Ynjxsjmh
#+EMAIL: ynjxsjmh@gmail.com
#+FILETAGS: ::

* Table of Contents                                                     :TOC_5:QUOTE:
#+BEGIN_QUOTE
- [[#需求分析][需求分析]]
  - [[#用户模块][用户模块]]
    - [[#用户注册功能][用户注册功能]]
    - [[#用户登录功能][用户登录功能]]
    - [[#用户退出功能][用户退出功能]]
  - [[#客户模块][客户模块]]
    - [[#查询所有客户功能][查询所有客户功能]]
    - [[#按条件查询所有的客户][按条件查询所有的客户]]
      - [[#使用异步的方式加载客户级别和客户的来源][使用异步的方式加载客户级别和客户的来源]]
      - [[#异步获取客户级别][异步获取客户级别]]
        - [[#ajax的代码][ajax的代码]]
        - [[#action的代码][Action的代码]]
        - [[#customeraction的分页查询的代码][CustomerAction的分页查询的代码]]
      - [[#添加客户功能含有文件上传功能][添加客户功能（含有文件上传功能）]]
      - [[#修改客户的功能][修改客户的功能]]
      - [[#删除客户的功能][删除客户的功能]]
- [[#项目实现][项目实现]]
  - [[#项目环境搭建][项目环境搭建]]
    - [[#spring核心配置文件][spring核心配置文件]]
    - [[#引入log4jproperties][引入log4j.properties]]
    - [[#引入工具类][引入工具类]]
    - [[#fastjson的使用][FastJson的使用]]
    - [[#分页类][分页类]]
  - [[#客户管理功能][客户管理功能]]
    - [[#客户管理后台][客户管理后台]]
      - [[#客户与数据字典实体对象及映射文件][客户与数据字典实体对象及映射文件]]
      - [[#客户管理与数据字典的dao层接口及实现类][客户管理与数据字典的Dao层接口及实现类]]
      - [[#客户管理与数据字典的service层接口及实现类][客户管理与数据字典的Service层接口及实现类]]
    - [[#客户管理前台][客户管理前台]]
      - [[#显示客户页面][显示客户页面]]
      - [[#配置strutsxml][配置struts.xml]]
      - [[#客户管理控制层][客户管理控制层]]
      - [[#在spring中配置action的注入][在spring中配置Action的注入]]
      - [[#增加客户页面][增加客户页面]]
      - [[#修改客户页面][修改客户页面]]
#+END_QUOTE

* 需求分析
** 用户模块
*** 用户注册功能
1. 可以先判断登录名是否已经存在
2. 要给密码使用MD5进行加密操作
*** 用户登录功能
1. 登录功能要注意需要先给密码加密后，再进行查询
    - 密码加密后再查询
    - 用户的状态必须是1，字符串类型的。表示用户是可用的。
*** 用户退出功能
1. 把用户信息从HttpSession中清除

** 客户模块
*** 查询所有客户功能
1. 数据字典表的引入
    - 数据字典表的作用：规范开发中数据的写法
    - 字段表与客户表是一对多的关系
    - 修改客户表，添加外键
2. 创建字典表的实体和映射的配置文件
    - 编写字典表的JavaBean和映射的配置文件
    - 修改Customer的JavaBean，因为是多方，需要把外键字段换成字典对象
    - 修改Customer.hbm.xml的配置文件，配置多对一
3. 分页查询所有的客户功能实现

*** 按条件查询所有的客户
**** 使用异步的方式加载客户级别和客户的来源
- 前端使用JQuery的ajax技术
- 后端使用fastjson的jar包
    - 导入fastjson的开发jar包fastjson-1.2.8.jar
    - String s = JSON.toJSONString(集合)
    - String s = JSON.toJSONString(对象)

- 如果List集合中存入相同引用的对象
    - fastjson默认的情况下是进行循环检测的，去除掉死循环调用的方式
    - 可以使用JSON.toJSONString(p,SerializerFeature.DisableCircularReferenceDetect) 去除循环检测，但是就会出现死循环的效果
    - 最后可以使用注解：@JSONField(serialize=false)对指定的属性不转换成json

**** 异步获取客户级别
***** ajax的代码
#+BEGIN_SRC js
var url = "${pageContext.request.contextPath }/dict_findByCode.action";
var param = {"dict_type_code":"006"};
$.post(url,param,function(data){
    $(data).each(function(){
        var id = "${model.level.dict_id}";
        if(id == this.dict_id){
            $("#levelId").append("<option value='"+this.dict_id+"' selected>"+this.dict_item_name+"</option>");
        }else{
            $("#levelId").append("<option value='"+this.dict_id+"'>"+this.dict_item_name+"</option>");
        }
    });
},"json");
#+END_SRC

***** Action的代码
#+BEGIN_SRC java
public String findByCode(){
    List<Dict> list = dictService.findByCode(dict.getDict_type_code());
    String jsonString = FastJsonUtil.toJSONString(list);
    HttpServletResponse response = ServletActionContext.getResponse();
    FastJsonUtil.write_json(response, jsonString);
    return NONE;
}
#+END_SRC

***** CustomerAction的分页查询的代码
#+BEGIN_SRC java
public String findByPage(){
    // 调用service业务层
    DetachedCriteria criteria = DetachedCriteria.forClass(Customer.class);
    // 拼接查询的条件
    String name = customer.getCust_name();
    if(name != null && !name.trim().isEmpty()){
        criteria.add(Restrictions.like("cust_name", "%"+name+"%"));
    }

    // System.out.println(customer.getLevel().getDict_type_code());
    Dict level = customer.getLevel();
    if(level != null && !level.getDict_id().trim().isEmpty()){
        criteria.add(Restrictions.eq("level.dict_id", level.getDict_id()));
    }

    Dict source = customer.getSource();
    if(source != null && !source.getDict_id().trim().isEmpty()){
        criteria.add(Restrictions.eq("source.dict_id", source.getDict_id()));
    }

    // 查询
    PageBean<Customer> page = customerService.findByPage(pageCode,pageSize,criteria);
    // 压栈
    ValueStack vs = ActionContext.getContext().getValueStack();
    // 栈顶是map<"page",page对象>
    vs.set("page", page);
    vs.set("cust_name", name);
    return "page";
}
#+END_SRC

值栈是对应每一个请求对象的轻量级的数据存储中心，在这里统一管理着数据，供Action、Result、Interceptor等Struts2的其他部分使用，这样数据被集中管理起来而不凌乱。

简单的说，值栈能够线程安全的为每个请求提供公共的数据存取服务。

当有请求的时候，Struts2会为每个请求创建一个新的值栈，也就是说，栈和请求是一一对应的，不同的请求，值栈也不一样，而值栈封装了一次请求所有需要操作的相关的数据。

正是因为值栈和请求的对应关系，因此值栈能保证线程安全的为每个请求提供公共的数据存取服务。

https://raw.githubusercontent.com/Ynjxsjmh/ynjxsjmh.github.io/master/img/2019/2019-04-07-01-01.png

customerAction对象中有model属性，在JavaBean中是否是属性要看该变量是否有set或get方法。

#+BEGIN_SRC java
public Customer getModel() {
        return customer;
}
#+END_SRC

所以model是customerAction的属性，且model就是customer对象，它封装了页面表单的请求数据。
在list.jsp页面上要获取客户名称就可以直接从值栈中获取。${ model.cust_name }

**** 添加客户功能（含有文件上传功能）
1. 跳转到客户的添加页面，需要通过ajax来显示客户的级别，客户的来源和客户的行业。
2. 添加文件上传的选择项
3. 客户端三个注意事项
    1. method="post"
    2. enctype="multipart/form-data"
    3. <input type="file" name="myfile">
4. Struts2框架的使用拦截器完成了文件上传，并且底层使用也是FileUpload开源的组件。
    - 提供 FileUpload 拦截器，用于解析 multipart/form-data 编码格式请求，解析上传文件内容 
    - fileUpload拦截器 默认在 defaultStack 栈中， 默认会执行的 

    - 在Action中编写文件上传，需要定义三个属性
        1. 文件类型File ,属性名与表单中file的name属性名一致.
        2. 字符串类型String , 属性名：前段是name属性名一致 + ContentType;
        3. 字符串类型String , 属性名：前段是name属性名一致+FileName;

        > 最后需要为上述的三个属性提供set方法。 \\
        > 可以通过FileUtils提供 copyFile 进行文件复制，将上传文件 保存到服务器端 

5. 文件上传中存在的问题
    * 先配置input逻辑视图
    * 在页面中显示错误信息
    * 文件上传的总大小默认值是2M，如果超过了2M，程序会报出异常。可以使用<s:actionError>来查看具体信息！

        > 解决总大小的设置，找到常量：
            * struts.multipart.parser=jakarta -- 默认文件上传解析器，就是FileUpload组件
            * struts.multipart.saveDir=       -- 文件上传的临时文件存储目录
            * struts.multipart.maxSize=2097152   -- 文件上传的最大值（总大小），默认是2M

        > 可以在struts.xml中设置常量，修改文件上传的默认总大小！！！
            * <constant name="struts.multipart.maxSize" value="5000000"></constant>

6. 还可以通过配置拦截器来设置文件上传的一些属性

先在<action>标签中引入文件上传的拦截器

#+BEGIN_SRC nxml
<interceptor-ref name="defaultStack">
    <!-- 设置单个上传文件的大小 -->
    <param name="fileUpload.maximumSize">2097152</param>
    <!-- 设置扩展名 -->
    <param name="fileUpload.allowedExtensions">.txt</param>
</interceptor-ref>
#+END_SRC

**** 修改客户的功能
1. 先通过客户的主键查询出客户的详细信息，显示到修改的页面上
    - 要把客户的主键和上传文件的路径使用隐藏域保存起来
2. 修改客户的信息
    - 如果用户新上传了文件，删除旧的文件，上传新的文件。
    - 如果用户没有上传新文件，正常更新。
**** 删除客户的功能
1. 删除上传的文件后，再删除客户信息。

* 项目实现
** 项目环境搭建
*** spring核心配置文件
src/applicationContext.xml
#+BEGIN_SRC nxml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop.xsd
    http://www.springframework.org/schema/tx 
    http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- 先配置C3P0的连接池 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="com.mysql.jdbc.Driver" />
        <property name="jdbcUrl" value="jdbc:mysql:///crmssh01" />
        <property name="user" value="root" />
        <property name="password" value="root" />
    </bean>

    <!-- LocalSessionFactoryBean加载配置文件 -->
    <bean id="sessionFactory"
    class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <!-- 先加载连接池 -->
        <property name="dataSource" ref="dataSource" />
        <!-- 加载方言，加载可选 -->
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">true</prop>
                <!-- 启动时自动建表 -->
                <prop key="hibernate.hbm2ddl.auto">update</prop>
            </props>
        </property>

        <!-- 引入映射的配置文件 -->
        <property name="mappingResources">
            <list>
                 
            </list>
        </property>
    </bean>

    <!-- 事务管理器 -->
    <bean id="transactionManager"
        class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>
    <!-- 配置事务特性 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED" read-only="false"/>
            <tx:method name="del*" propagation="REQUIRED" read-only="false"/>
            <tx:method name="update*" propagation="REQUIRED" read-only="false" />
            <tx:method name="*" read-only="true" />
        </tx:attributes>
    </tx:advice>
    <!-- 配置那些类的方法进行事务管理 -->
    <aop:config>
        <aop:pointcut id="allManagerMethod"
            expression="execution (* com.atcast.service.*.*(..))" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="allManagerMethod" />
    </aop:config>
</beans>
#+END_SRC

*** 引入log4j.properties
*** 引入工具类
FastJsonUtil.java、MD5Utils.java、UploadUtils.java

*** FastJson的使用
com.atcast.test/Demo.java
#+BEGIN_SRC java
package com.atcast.test;
import java.util.ArrayList;
import java.util.List;
import org.junit.Test;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.atcast.domain.Customer;

public class Demo {
    /**
     * 演示fastjson的简单的使用
     */
    @Test
    public void run1(){
        Customer c = new Customer();
        c.setCust_id(20L);
        c.setCust_name("测试");
        c.setCust_phone("120");
        
        // 转换成json的字符串
        String jsonString = JSON.toJSONString(c);
        System.out.println(jsonString);
    }
    
    @Test
    public void run2(){
        List<Customer> list = new ArrayList<Customer>();
        Customer c = new Customer();
        c.setCust_id(20L);
        c.setCust_name("测试");
        c.setCust_phone("120");
        list.add(c);
        
        Customer c2 = new Customer();
        c2.setCust_id(30L);
        c2.setCust_name("测试2");
        c2.setCust_phone("12000");
        list.add(c2);
        
        // 转换成json的字符串
        String jsonString = JSON.toJSONString(list);
        System.out.println(jsonString);
    }
    
    /**
     * 默认的情况下，fastjson禁止循环的引用
     */
    @Test
    public void run3(){
        List<Customer> list = new ArrayList<Customer>();
        Customer c = new Customer();
        c.setCust_id(20L);
        c.setCust_name("测试");
        c.setCust_phone("120");
        
        list.add(c);
        list.add(c);
        
        // 转换成json的字符串
        //String jsonString = JSON.toJSONString(list);
        
        // 禁止循环的引用
        String jsonString = JSON.toJSONString(list, SerializerFeature.DisableCircularReferenceDetect);
        System.out.println(jsonString);
    }
}
#+END_SRC

*** 分页类
com.atcast.domain/PageBean.java
#+BEGIN_SRC java
package com.atcast.domain;
import java.util.List;
/**
 * 分页的JavaBean
 * @author Administrator
 */
public class PageBean<T> {
    
    // 当前页
    private int pageCode;
    
    // 总页数
    // private int totalPage;
    
    // 总记录数
    private int totalCount;
    // 每页显示的记录条数
    private int pageSize;
    // 每页显示的数据
    private List<T> beanList;
    
    public int getPageCode() {
        return pageCode;
    }
    public void setPageCode(int pageCode) {
        this.pageCode = pageCode;
    }
    
    /**
     * 调用getTotalPage() 获取到总页数
     * JavaBean的属性规定：totalPage是JavaBean是属性 ${pageBean.totalPage}
     * @return
     */
    public int getTotalPage() {
        // 计算
        int totalPage = totalCount / pageSize;
        // 说明整除
        if(totalCount % pageSize == 0){
            return totalPage;
        }else{
            return totalPage + 1;
        }
    }
    
    /*public void setTotalPage(int totalPage) {
        this.totalPage = totalPage;
    }*/
    
    public int getTotalCount() {
        return totalCount;
    }
    public void setTotalCount(int totalCount) {
        this.totalCount = totalCount;
    }
    public int getPageSize() {
        return pageSize;
    }
    public void setPageSize(int pageSize) {
        this.pageSize = pageSize;
    }
    public List<T> getBeanList() {
        return beanList;
    }
    public void setBeanList(List<T> beanList) {
        this.beanList = beanList;
    }
}
#+END_SRC


** 客户管理功能
*** 客户管理后台
**** 客户与数据字典实体对象及映射文件
com.atcast.domain/Dict.java
#+BEGIN_SRC java
package com.atcast.domain;
/**
 * 字典表
 * @author Administrator
 */
public class Dict {
    /**
     *  `dict_id` varchar(32) NOT NULL COMMENT '数据字典id(主键)',
  `dict_type_code` varchar(10) NOT NULL COMMENT '数据字典类别代码',
  `dict_type_name` varchar(64) NOT NULL COMMENT '数据字典类别名称',
  `dict_item_name` varchar(64) NOT NULL COMMENT '数据字典项目名称',
  `dict_item_code` varchar(10) DEFAULT NULL COMMENT '数据字典项目(可为空)',
  `dict_sort` int(10) DEFAULT NULL COMMENT '排序字段',
  `dict_enable` char(1) NOT NULL COMMENT '1:使用 0:停用',
  `dict_memo` varchar(64) DEFAULT NULL COMMENT '备注',
     */
    //主键使用uuid
    private String dict_id;
    // 数据字典类别代码 01 06
    private String dict_type_code;
    // 类别名称 01所属于行业 06客户级别
    private String dict_type_name;
    // 字典项目名称
    private String dict_item_name;
    
    private String dict_item_code;
    // 排序字段
    private Integer dict_sort;
    private String dict_enable;
    private String dict_memo;
    
    public String getDict_id() {
        return dict_id;
    }
    public void setDict_id(String dict_id) {
        this.dict_id = dict_id;
    }
    public String getDict_type_code() {
        return dict_type_code;
    }
    public void setDict_type_code(String dict_type_code) {
        this.dict_type_code = dict_type_code;
    }
    public String getDict_type_name() {
        return dict_type_name;
    }
    public void setDict_type_name(String dict_type_name) {
        this.dict_type_name = dict_type_name;
    }
    public String getDict_item_name() {
        return dict_item_name;
    }
    public void setDict_item_name(String dict_item_name) {
        this.dict_item_name = dict_item_name;
    }
    public String getDict_item_code() {
        return dict_item_code;
    }
    public void setDict_item_code(String dict_item_code) {
        this.dict_item_code = dict_item_code;
    }
    public Integer getDict_sort() {
        return dict_sort;
    }
    public void setDict_sort(Integer dict_sort) {
        this.dict_sort = dict_sort;
    }
    public String getDict_enable() {
        return dict_enable;
    }
    public void setDict_enable(String dict_enable) {
        this.dict_enable = dict_enable;
    }
    public String getDict_memo() {
        return dict_memo;
    }
    public void setDict_memo(String dict_memo) {
        this.dict_memo = dict_memo;
    }
}
#+END_SRC

com.atcast.domain/Customer.java
#+BEGIN_SRC java
package com.atcast.domain;
public class Customer {
    /**
     * `cust_id` bigint(32) NOT NULL AUTO_INCREMENT COMMENT '客户编号(主键)',
  `cust_name` varchar(32) NOT NULL COMMENT '客户名称(公司名称)',
  `cust_user_id` bigint(32) DEFAULT NULL COMMENT '负责人id',
  `cust_create_id` bigint(32) DEFAULT NULL COMMENT '创建人id',
  `cust_source` varchar(32) DEFAULT NULL COMMENT '客户信息来源',
  `cust_industry` varchar(32) DEFAULT NULL COMMENT '客户所属行业',
  `cust_level` varchar(32) DEFAULT NULL COMMENT '客户级别',
  `cust_linkman` varchar(64) DEFAULT NULL COMMENT '联系人',
  `cust_phone` varchar(64) DEFAULT NULL COMMENT '固定电话',
  `cust_mobile` varchar(16) DEFAULT NULL COMMENT '移动电话',
     */
    private Long cust_id;
    // 客户名称
    private String cust_name;
    private Long cust_user_id;
    private Long cust_create_id;
    
    // 联系人名称
    private String cust_linkman;
    // 固定电话
    private String cust_phone;
    // 移动电话
    private String cust_mobile;
    
    // 描述的是 一客户的来源，多是客户
    private Dict source;
    // 一客户的行业 多是客户
    private Dict industry;
    // 一客户级别 多是客户
    private Dict level;
    
    // 上传文件保存的路径
    private String filepath;
    
    public Long getCust_id() {
        return cust_id;
    }
    public void setCust_id(Long cust_id) {
        this.cust_id = cust_id;
    }
    public String getCust_name() {
        return cust_name;
    }
    public void setCust_name(String cust_name) {
        this.cust_name = cust_name;
    }
    public Long getCust_user_id() {
        return cust_user_id;
    }
    public void setCust_user_id(Long cust_user_id) {
        this.cust_user_id = cust_user_id;
    }
    public Long getCust_create_id() {
        return cust_create_id;
    }
    public void setCust_create_id(Long cust_create_id) {
        this.cust_create_id = cust_create_id;
    }
    public String getCust_linkman() {
        return cust_linkman;
    }
    public void setCust_linkman(String cust_linkman) {
        this.cust_linkman = cust_linkman;
    }
    public String getCust_phone() {
        return cust_phone;
    }
    public void setCust_phone(String cust_phone) {
        this.cust_phone = cust_phone;
    }
    public String getCust_mobile() {
        return cust_mobile;
    }
    public void setCust_mobile(String cust_mobile) {
        this.cust_mobile = cust_mobile;
    }
    public Dict getSource() {
        return source;
    }
    public void setSource(Dict source) {
        this.source = source;
    }
    public Dict getIndustry() {
        return industry;
    }
    public void setIndustry(Dict industry) {
        this.industry = industry;
    }
    public Dict getLevel() {
        return level;
    }
    public void setLevel(Dict level) {
        this.level = level;
    }
    public String getFilepath() {
        return filepath;
    }
    public void setFilepath(String filepath) {
        this.filepath = filepath;
    }
}
#+END_SRC

com.atcast.domain/Dict.hbm.xml
#+BEGIN_SRC nxml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC 
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
  "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
    
<hibernate-mapping>
<class name="com.atcast.domain.Dict" table="base_dict">
        <id name="dict_id" column="dict_id">
            <!-- 换成字符串生成的策略 -->
            <generator class="uuid"/>
        </id>
<property name="dict_type_code" column="dict_type_code"/>
<property name="dict_type_name" column="dict_type_name"/>
<property name="dict_item_name" column="dict_item_name"/>
<property name="dict_item_code" column="dict_item_code"/>
    <property name="dict_sort" column="dict_sort"/>
        <property name="dict_enable" column="dict_enable"/>
        <property name="dict_memo" column="dict_memo"/>
    </class>
</hibernate-mapping>
#+END_SRC

com.atcast.domain/Customer.hbm.xml
#+BEGIN_SRC nxml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC 
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
    "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
    
<hibernate-mapping>
    <class name="com.atcast.domain.Customer" table="cst_customer">
        <id name="cust_id" column="cust_id">
            <generator class="native"/>
        </id>
        
        <property name="cust_name" column="cust_name"/>
    <property name="cust_user_id" column="cust_user_id"/>
<property name="cust_create_id" column="cust_create_id"/>
    <property name="cust_linkman" column="cust_linkman"/>
        <property name="cust_phone" column="cust_phone"/>
        <property name="cust_mobile" column="cust_mobile"/>
        
        <!-- 上传文件保存的路径 -->
        <property name="filepath" column="filepath"/>
        
        <!-- 配置的多方 name是JavaBean属性名称  class="一方类的全路径" cloumn="外键的名称"  -->
        <many-to-one name="source" class="com.atcast.domain.Dict" column="cust_source"/>
        <many-to-one name="industry" class="com.atcast.domain.Dict" column="cust_industry"/>
        <many-to-one name="level" class="com.atcast.domain.Dict" column="cust_level"/>
    </class>
</hibernate-mapping>
#+END_SRC

src/applicationContext.xml
#+BEGIN_SRC nxml
<!-- 引入映射的配置文件 -->
<property name="mappingResources">
    <list>
        <value>com/atcast/domain/Customer.hbm.xml</value>
        <value>com/atcast/domain/Dict.hbm.xml</value>
    </list>
</property>
#+END_SRC

**** 客户管理与数据字典的Dao层接口及实现类
com.atcast.dao/DictDao.java
#+BEGIN_SRC java
package com.atcast.dao;
import java.util.List;
import com.atcast.domain.Dict;
public interface DictDao {
    List<Dict> findByCode(String dict_type_code);
}
#+END_SRC

com.atcast.dao/CustomerDao.java
#+BEGIN_SRC java
package com.atcast.dao;
import org.hibernate.criterion.DetachedCriteria;
import com.atcast.domain.Customer;
import com.atcast.domain.PageBean;

public interface CustomerDao {
    public void save(Customer customer);
    public PageBean<Customer> findByPage(Integer pageCode, Integer pageSize, DetachedCriteria criteria);
    public Customer findById(Long cust_id);
    public void delete(Customer customer);
    public void update(Customer customer);
}
#+END_SRC

com.atcast.dao/DictDaoImpl.java
#+BEGIN_SRC java
package com.atcast.dao;
import java.util.List;
import org.springframework.orm.hibernate5.support.HibernateDaoSupport;
import com.atcast.domain.Dict;
/**
 * 持久层
 * @author Administrator
 */
public class DictDaoImpl extends HibernateDaoSupport implements DictDao {
    /**
     * 通过客户类别编码查询字段
     */
    public List<Dict> findByCode(String dict_type_code) {
        return (List<Dict>) this.getHibernateTemplate().find("from Dict where dict_type_code = ?", dict_type_code);
    }
}
#+END_SRC

com.atcast.dao/CustomerDaoImpl.java
#+BEGIN_SRC java
package com.atcast.dao;
import java.util.List;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Projections;
import org.springframework.orm.hibernate5.support.HibernateDaoSupport;
import com.atcast.domain.Customer;
import com.atcast.domain.PageBean;

/**
 * 持久层
 * @author Administrator
 */
public class CustomerDaoImpl extends HibernateDaoSupport implements CustomerDao {
    /**
     * 保存客户
     */
    public void save(Customer customer) {
        // 把数据，保存到数据库中
        this.getHibernateTemplate().save(customer);
    }
    
    /**
     * 分页的查询
     */
    public PageBean<Customer> findByPage(Integer pageCode, Integer pageSize, DetachedCriteria criteria) {
        PageBean<Customer> page = new PageBean<Customer>();
        page.setPageCode(pageCode);
        page.setPageSize(pageSize);
        
        // 先查询总记录数   select count(*)
        criteria.setProjection(Projections.rowCount());
        List<Number> list = (List<Number>) this.getHibernateTemplate().findByCriteria(criteria);
        if(list != null && list.size() > 0){
            int totalCount = list.get(0).intValue();
            // 总的记录数
            page.setTotalCount(totalCount);
        }
        
        // 强调：把select count(*) 先清空，变成  select * ...
        //这句的作用是将原来设置Projection(投影,投影图)的清空，否则只能查到满足条件的总记录数而criteria.list()将没有记录。
        criteria.setProjection(null);
        
        // 提供分页的查询
        List<Customer> beanList = (List<Customer>) this.getHibernateTemplate().findByCriteria(criteria, (pageCode-1)*pageSize, pageSize);
        // 分页查询数据，每页显示的数据  使用limit
        page.setBeanList(beanList);
        
        return page;
    }

    /**
     * 通过主键，查询客户
     */
    public Customer findById(Long cust_id) {
        return this.getHibernateTemplate().get(Customer.class, cust_id);
    }

    /**
     * 删除客户
     */
    public void delete(Customer customer) {
        this.getHibernateTemplate().delete(customer);
    }
    
    /**
     * 更新客户
     */
    public void update(Customer customer) {
        this.getHibernateTemplate().update(customer);
    }
}
#+END_SRC

src/applicationContext.xml
#+BEGIN_SRC nxml
<!-- 配置客户模块 -->
<bean id="customerDao" class="com.atcast.dao.CustomerDaoImpl">
    <property name="sessionFactory" ref="sessionFactory" />
</bean>
<!-- 字典 -->
<bean id="dictDao" class="com.atcast.dao.DictDaoImpl">
    <property name="sessionFactory" ref="sessionFactory" />
</bean>
#+END_SRC
**** 客户管理与数据字典的Service层接口及实现类
com.atcast.service/DictService.java
#+BEGIN_SRC java
package com.atcast.service;
import java.util.List;
import com.atcast.domain.Dict;
public interface DictService {
    List<Dict> findByCode(String dict_type_code);
}
#+END_SRC

com.atcast.service/CustomerService.java
#+BEGIN_SRC java
package com.atcast.service;
import org.hibernate.criterion.DetachedCriteria;
import com.atcast.domain.Customer;
import com.atcast.domain.PageBean;

public interface CustomerService {
    public void save(Customer customer);
    public PageBean<Customer> findByPage(Integer pageCode, Integer pageSize, DetachedCriteria criteria);
    public Customer findById(Long cust_id);
    public void delete(Customer customer);
    public void update(Customer customer);
}
#+END_SRC

com.atcast.service/DictServiceImpl.java
#+BEGIN_SRC java
package com.atcast.service;
import java.util.List;
import com.atcast.dao.DictDao;
import com.atcast.domain.Dict;
/**
 * 字典
 * @author Administrator
 */
public class DictServiceImpl implements DictService {
    
    private DictDao dictDao;
    public void setDictDao(DictDao dictDao) {
        this.dictDao = dictDao;
    }
    
    /**
     * 通过客户类别编码查询字段
     */
    public List<Dict> findByCode(String dict_type_code) {
        return dictDao.findByCode(dict_type_code);
    }
}
#+END_SRC

com.atcast.service/CustomerServiceImpl.java
#+BEGIN_SRC java
package com.atcast.service;
import org.hibernate.criterion.DetachedCriteria;
import com.atcast.dao.CustomerDao;
import com.atcast.domain.Customer;
import com.atcast.domain.PageBean;
/**
 * 客户的业务层
 * @author Administrator
 */
public class CustomerServiceImpl implements CustomerService {
    private CustomerDao customerDao;
    public void setCustomerDao(CustomerDao customerDao) {
        this.customerDao = customerDao;
    }

    /**
     * 保存客户
     */
    public void save(Customer customer) {
        customerDao.save(customer);
    }
    /**
     * 分页查询
     */
    public PageBean<Customer> findByPage(Integer pageCode, Integer pageSize, DetachedCriteria criteria) {
        return customerDao.findByPage(pageCode,pageSize,criteria);
    }
    /**
     * 通过主键，查询客户
     */
    public Customer findById(Long cust_id) {
        return customerDao.findById(cust_id);
    }

    public void delete(Customer customer) {
        customerDao.delete(customer);
    }
    
    public void update(Customer customer) {
        customerDao.update(customer);
    }
}
#+END_SRC

src/applicationContext.xml
#+BEGIN_SRC nxml
<bean id="customerService" class="com.atcast.service.CustomerServiceImpl">
        <property name="customerDao" ref="customerDao" />
    </bean>
<bean id="dictService" class="com.atcast.service.DictServiceImpl">
        <property name="dictDao" ref="dictDao" />
</bean>
#+END_SRC

*** 客户管理前台
**** 显示客户页面
WebRoot/jsp/customer/list.jsp
#+BEGIN_SRC html
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<%@ taglib prefix="s" uri="/struts-tags" %>    
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<TITLE>客户列表</TITLE> 
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<LINK href="${pageContext.request.contextPath }/css/Style.css" type=text/css rel=stylesheet>
<LINK href="${pageContext.request.contextPath }/css/Manage.css" type=text/css
    rel=stylesheet>
<script type="text/javascript" src="${pageContext.request.contextPath }/js/jquery-1.11.3.min.js"></script>
<SCRIPT language=javascript>
    // 提交分页的查询的表单
    function to_page(page){
        if(page){
            $("#page").val(page);
        }
        document.customerForm.submit();
    }
    
    // 页面的加载
    $(function(){
        // 发送ajax的请求
        var url = "${ pageContext.request.contextPath }/dict_findByCode.action";
        var param = {"dict_type_code":"006"};
        $.post(url,param,function(data){
            // 遍历，i迭代下标值，n迭代对象
            $(data).each(function(i,n){
                // alert(i+" : "+n.dict_item_name);
                // alert(this.dict_item_name);
                
                // 先获取值栈中的值，使用EL表达式
            //model就是Customer类的对象，level是Dict类的对象
                var vsId = "${model.level.dict_id}";
                //alert(vsId);
// 值栈中的id值和遍历的id值相同，让其被选中。否则会变成"请选择
                if(vsId == n.dict_id){
                    // JQ的DOM操作
                    $("#levelId").append("<option value='"+n.dict_id+"' selected>"+n.dict_item_name+"</option>");
                }else{
                    $("#levelId").append("<option value='"+n.dict_id+"'>"+n.dict_item_name+"</option>");
                }
            });
        },"json");
        
        // 获取来源
        var param = {"dict_type_code":"002"};
        $.post(url,param,function(data){
            // 遍历
            $(data).each(function(i,n){
                var vsId = "${model.source.dict_id}";
                if(vsId == n.dict_id){
                    // JQ的DOM操作
                    $("#sourceId").append("<option value='"+n.dict_id+"' selected>"+n.dict_item_name+"</option>");
                }else{
                    $("#sourceId").append("<option value='"+n.dict_id+"'>"+n.dict_item_name+"</option>");
                }
            });
        },"json");
    });
    
</SCRIPT>
<s:debug></s:debug>
<META content="MSHTML 6.00.2900.3492" name=GENERATOR>
</HEAD>
<BODY>
    <FORM id="customerForm" name="customerForm" action="${pageContext.request.contextPath }/customer_findByPage.action" method=post>
        
        <TABLE cellSpacing=0 cellPadding=0 width="98%" border=0>
            <TBODY>
                <TR>
                    <TD width=15><IMG src="${pageContext.request.contextPath }/images/new_019.jpg"
                        border=0></TD>
                    <TD width="100%" background="${pageContext.request.contextPath }/images/new_020.jpg"
                        height=20></TD>
                    <TD width=15><IMG src="${pageContext.request.contextPath }/images/new_021.jpg"
                        border=0></TD>
                </TR>
            </TBODY>
        </TABLE>
        <TABLE cellSpacing=0 cellPadding=0 width="98%" border=0>
            <TBODY>
                <TR>
                    <TD width=15 background=${pageContext.request.contextPath }/images/new_022.jpg><IMG
                        src="${pageContext.request.contextPath }/images/new_022.jpg" border=0></TD>
                    <TD vAlign=top width="100%" bgColor=#ffffff>
                        <TABLE cellSpacing=0 cellPadding=5 width="100%" border=0>
                            <TR>
                                <TD class=manageHead>当前位置：客户管理 &gt; 客户列表</TD>
                            </TR>
                            <TR>
                                <TD height=2></TD>
                            </TR>
                        </TABLE>
                        <TABLE borderColor=#cccccc cellSpacing=0 cellPadding=0
                            width="100%" align=center border=0>
                            <TBODY>
                                <TR>
                                    <TD height=25>
                                        <TABLE cellSpacing=0 cellPadding=2 border=0>
                                            <TBODY>
                                                <TR>
                                                    <TD>客户名称：</TD>
                                                    <TD>
                                    <!-- 从值栈中获取用户名 -->
                                                        <INPUT class=textbox id=sChannel2 style="WIDTH: 80px" maxLength=50 name="cust_name" value="${ model.cust_name }">
                                                    </TD>
                                                    
                                                    <td>客户级别</td>
                                                    <td>
                                                        <select name="level.dict_id" id="levelId">
                                                            <option value="">--请选择--</option>
                                                        </select>
                                                    </td>
                                                    
                                                    <td>客户来源</td>
                                                    <td>
                                                        <select name="source.dict_id" id="sourceId">
                                                            <option value="">--请选择--</option>
                                                        </select>
                                                    </td>
                                                    
                                                    <TD>
                                                        <INPUT class=button id=sButton2 type=submit value="筛选 " name=sButton2>
                                                    </TD>
                                                </TR>
                                            </TBODY>
                                        </TABLE>
                                    </TD>
                                </TR>
                                
                                <TR>
                                    <TD>
                                        <TABLE id=grid
                                            style="BORDER-TOP-WIDTH: 0px; FONT-WEIGHT: normal; BORDER-LEFT-WIDTH: 0px; BORDER-LEFT-COLOR: #cccccc; BORDER-BOTTOM-WIDTH: 0px; BORDER-BOTTOM-COLOR: #cccccc; WIDTH: 100%; BORDER-TOP-COLOR: #cccccc; FONT-STYLE: normal; BACKGROUND-COLOR: #cccccc; BORDER-RIGHT-WIDTH: 0px; TEXT-DECORATION: none; BORDER-RIGHT-COLOR: #cccccc"
                                            cellSpacing=1 cellPadding=2 rules=all border=0>
                                            <TBODY>
                                                <TR
                                                    style="FONT-WEIGHT: bold; FONT-STYLE: normal; BACKGROUND-COLOR: #eeeeee; TEXT-DECORATION: none">
                                                    <TD>客户名称</TD>
                                                    <TD>客户级别</TD>
                                                    <TD>客户来源</TD>
                                                    <TD>联系人</TD>
                                                    <TD>电话</TD>
                                                    <TD>手机</TD>
                                                    <TD>操作</TD>
                                                </TR>
                                                <c:forEach items="${page.beanList}" var="customer">
                                                <TR
                                                    style="FONT-WEIGHT: normal; FONT-STYLE: normal; BACKGROUND-COLOR: white; TEXT-DECORATION: none">
                                                    <TD>${customer.cust_name }</TD>
                                                    
                                                    <TD>${customer.level.dict_item_name }</TD>
                                                    <TD>${customer.source.dict_item_name }</TD>
                                                    
                                                    <TD>${customer.cust_linkman }</TD>
                                                    <TD>${customer.cust_phone }</TD>
                                                    <TD>${customer.cust_mobile }</TD>
                                                    <TD>
                                                    <a href="${pageContext.request.contextPath }/customer_initUpdate?cust_id=${customer.cust_id}">修改</a>
                                                    &nbsp;&nbsp;
                                                    <a href="${pageContext.request.contextPath}/customer_delete?cust_id=${customer.cust_id}" onclick="return window.confirm('确定删除吗？')">删除</a>
                                                    </TD>
                                                </TR>
                                                
                                                </c:forEach>

                                            </TBODY>
                                        </TABLE>
                                    </TD>
                                </TR>
                                
                                <TR>
                                    <TD>
                                        <SPAN id=pagelink>
                                            <DIV style="LINE-HEIGHT: 20px; HEIGHT: 20px; TEXT-ALIGN: right">
                                                共[<B>${page.totalCount}</B>]条记录，共[<B>${page.totalPage}</B>]页
                                                ,每页显示
                                                <select name="pageSize">
                                                    <option value="2" <c:if test="${page.pageSize==2 }">selected</c:if>>2</option>
                                                    <option value="3" <c:if test="${page.pageSize==3 }">selected</c:if>>3</option>
                                                </select>
                                                
                                                条
                                                
                                                <c:if test="${ page.pageCode > 1 }">
                                                    [<A href="javascript:to_page(${page.pageCode-1})">前一页</A>]
                                                </c:if>
                                                
                                                <B>${page.pageCode}</B>
                                                
                                                <c:if test="${ page.pageCode < page.totalPage }">
                                                    [<A href="javascript:to_page(${page.pageCode+1})">后一页</A>] 
                                                </c:if>
                                                
                                                到
                                                <input type="text" size="3" id="page" name="pageCode" />
                                                页
                                                
                                                <input type="button" value="Go" onclick="to_page()"/>
                                            </DIV>
                                        </SPAN>
                                    </TD>
                                </TR>
                            </TBODY>
                        </TABLE>
                    </TD>
                    <TD width=15 background="${pageContext.request.contextPath }/images/new_023.jpg"><IMG
                        src="${pageContext.request.contextPath }/images/new_023.jpg" border=0></TD>
                </TR>
            </TBODY>
        </TABLE>
        <TABLE cellSpacing=0 cellPadding=0 width="98%" border=0>
            <TBODY>
                <TR>
                    <TD width=15><IMG src="${pageContext.request.contextPath }/images/new_024.jpg"
                        border=0></TD>
                    <TD align=middle width="100%"
                        background="${pageContext.request.contextPath }/images/new_025.jpg" height=15></TD>
                    <TD width=15><IMG src="${pageContext.request.contextPath }/images/new_026.jpg"
                        border=0></TD>
                </TR>
            </TBODY>
        </TABLE>
    </FORM>
</BODY>
</HTML>
#+END_SRC

**** 配置struts.xml
struts.xml
#+BEGIN_SRC nxml
    <!-- 配置客户的Action，如果Action由Spring框架来管理，class标签上只需要编写ID值就OK -->
        <action name="customer_*" class="customerAction" method="{1}">
            <result name="page">/jsp/customer/list.jsp</result>
            <result name="initAddUI">/jsp/customer/add.jsp</result>
            <result name="save" type="redirectAction">customer_findByPage.action</result>
            <result name="input">/jsp/error.jsp</result>
            <result name="delete" type="redirectAction">customer_findByPage.action</result>
<!-- 只能用请求转发，不能用重定向，否则值栈中的数据就没有了。 -->
            <result name="initUpdate">/jsp/customer/edit.jsp</result>
            <result name="update" type="redirectAction">customer_findByPage.action</result>
            
            <!-- 引入默认的拦截器 -->
            <interceptor-ref name="defaultStack">
                <!-- 决定上传文件的类型 -->
                <param name="fileUpload.allowedExtensions">.jpg,.txt</param>
            </interceptor-ref>
        </action>
        
        <!-- 字典模块 -->
        <action name="dict_*" class="dictAction" method="{1}"></action>
#+END_SRC

**** 客户管理控制层
com.atcast.web.action/DictAction.java
#+BEGIN_SRC java
package com.atcast.web.action;
import java.util.List;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts2.ServletActionContext;
import com.atcast.domain.Dict;
import com.atcast.service.DictService;
import com.atcast.utils.FastJsonUtil;
import com.opensymphony.xwork2.ActionSupport;
import com.opensymphony.xwork2.ModelDriven;
/**
 * 字典控制器
 * @author Administrator
 */
public class DictAction extends ActionSupport implements ModelDriven<Dict>{
    private static final long serialVersionUID = -82264029685635742L;
    
    private Dict dict = new Dict();

    public Dict getModel() {
        return dict;
    }
    
    private DictService dictService;
    public void setDictService(DictService dictService) {
        this.dictService = dictService;
    }
    
    /**
     * 通过字段的type_code值，查询客户级别或者客户的来源
     * @return
     */
    public String findByCode(){
        // 调用业务层
        List<Dict> list = dictService.findByCode(dict.getDict_type_code());
        // List<Dict> list = dictService.findByCode("006");
        
        // 使用fastjson，把list转换成json字符串
        String jsonString = FastJsonUtil.toJSONString(list);
        // 把json字符串写到浏览器
        HttpServletResponse response = ServletActionContext.getResponse();
        // 输出
        FastJsonUtil.write_json(response, jsonString);
        return NONE;
    }
}
#+END_SRC

com.atcast.web.action/CustomerAction.java
#+BEGIN_SRC java
package com.atcast.web.action;
import java.io.File;
import java.io.IOException;
import org.apache.commons.io.FileUtils;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Restrictions;
import com.atcast.domain.Customer;
import com.atcast.domain.Dict;
import com.atcast.domain.PageBean;
import com.atcast.service.CustomerService;
import com.atcast.utils.UploadUtils;
import com.opensymphony.xwork2.ActionContext;
import com.opensymphony.xwork2.ActionSupport;
import com.opensymphony.xwork2.ModelDriven;
import com.opensymphony.xwork2.util.ValueStack;
/**
 * 客户的控制层
 * @author Administrator
 * 
 */
public class CustomerAction extends ActionSupport implements ModelDriven<Customer>{
    private static final long serialVersionUID = 113695314694166436L;
    // 不要忘记手动new
    private Customer customer = new Customer();
    //javabean的属性必须要有get或set方法
//model是CustomerAction类的属性，是否是属性取决于set/get方法
    public Customer getModel() {
        //System.out.println(customer.getCust_name());
    //System.out.println(customer.getLevel().getDict_item_name());//客户来源
        return customer;
    }
    
    // 提供service的成员属性，提供set方法
    private CustomerService customerService;
    public void setCustomerService(CustomerService customerService) {
        this.customerService = customerService;
    }
    
    // 属性驱动的方式
    // 当前页，默认值就是1  
    private Integer pageCode = 1;
    public void setPageCode(Integer pageCode) {
        if(pageCode == null){
            pageCode = 1;
        }
        this.pageCode = pageCode;
    }
    
    // 每页显示的数据的条数
    private Integer pageSize = 2;
    public void setPageSize(Integer pageSize) {
        this.pageSize = pageSize;
    }
    
    /**
     * 分页的查询方法
     * @return
     */
    public String findByPage(){
        // 调用service业务层  
        DetachedCriteria criteria = DetachedCriteria.forClass(Customer.class);
        // 拼接查询的条件:在显示客户页面上有输入条件
        String cust_name = customer.getCust_name();
    if(cust_name != null && !cust_name.trim().isEmpty()){
            // 说明，客户的名称输入值了
            criteria.add(Restrictions.like("cust_name", "%"+cust_name+"%"));
        }
        
        // 拼接客户的级别
        Dict level = customer.getLevel();
if(level != null && !level.getDict_id().trim().isEmpty()){
            // 说明，客户的级别肯定选择了一个级别
            criteria.add(Restrictions.eq("level.dict_id", level.getDict_id()));
        }
        
        // 客户的来源
        Dict source = customer.getSource();
        if(source != null && !source.getDict_id().trim().isEmpty()){
            // 说明，客户的级别肯定选择了一个级别
            criteria.add(Restrictions.eq("source.dict_id", source.getDict_id()));
        }
        
        // 查询
        PageBean<Customer> page = customerService.findByPage(pageCode,pageSize,criteria);
        // 压栈
        ValueStack vs = ActionContext.getContext().getValueStack();
        // 栈顶是map<"page",page对象>
        vs.set("page", page);
        return "page";
    }
    
    /**
     * 初始化到添加的页面
     * @return
     */
    public String initAddUI(){
        return "initAddUI";
    }
    
    /**
     * 文件的上传，需要在CustomerAction类中定义成员的属性，命名是有规则的！！
     * private File upload;     // 表示要上传的文件
     * private String uploadFileName;   表示是上传文件的名称（没有中文乱码）
     * private String uploadContentType;    表示上传文件的MIME类型
     * 提供set方法，拦截器就注入值了
     */
    
    // 要上传的文件
    private File upload;
    // 文件的名称
    private String uploadFileName;
    // 文件的MIME的类型
    private String uploadContentType;
    
    public void setUpload(File upload) {
        this.upload = upload;
    }
    public void setUploadFileName(String uploadFileName) {
        this.uploadFileName = uploadFileName;
    }
    public void setUploadContentType(String uploadContentType) {
        this.uploadContentType = uploadContentType;
    }
    
    /**
     * 保存客户的方法
     * @return
     * @throws IOException 
     */
    public String save() throws IOException{
        // 做文件的上传，说明用户选择了上传的文件了
        if(uploadFileName != null){
            // 打印
            System.out.println("文件类型："+uploadContentType);
            // 把文件的名称处理一下
            String uuidname = UploadUtils.getUUIDName(uploadFileName);
            String path = "c:\\apache-tomcat-7.0.57\\webapps\\upload\\";
            // 创建file对象
            File file = new File(path+uuidname);
            // 简单方式
            FileUtils.copyFile(upload, file);
            
            // 把上传的文件的路径，保存到客户表中
            customer.setFilepath(path+uuidname);
        }
        
        // 保存客户成功了
        customerService.save(customer);
        return "save";
    }
    
    /**
     * 更新客户初始化数据
     * @return
     */
    public String initUpdate(){
        //默认customer是压栈的，Action默认压栈，model是Action类的属性，getModel方法返回customer对象。
customer=customerService.findById(customer.getCust_id());
        return "initUpdate";
    }
    
    /**
     * 更新客户数据
     * @return
     */
    public String update() throws IOException{
        //判断，说明客户上传了新图片
        if(uploadFileName!=null){
            //先删除旧图片
            String oldFilepath=customer.getFilepath();
if(oldFilepath!=null && !oldFilepath.trim().isEmpty()){
                //说明旧的路径存在，删除图片
                File f=new File(oldFilepath);
                f.delete();
            }
            //上传新图片
            //处理文件名称
            String uuidname=UploadUtils.getUUIDName(uploadFileName);
            String path = "c:\\apache-tomcat-7.0.57\\webapps\\upload\\";
            File file=new File(path+uuidname);
            FileUtils.copyFile(upload, file);
            //把客户新图片的路径更新到数据库中
            customer.setFilepath(path+uuidname);
        }
        //更新客户信息
        customerService.update(customer);
        return "update";
    }
    
    /**
     * 删除客户
     * @return
     */
    public String delete(){
        // 删除客户，获取客户的信息获取到，上传文件的路径
        customer = customerService.findById(customer.getCust_id());
        // 获取上传文件的路径
        String filepath = customer.getFilepath();
        // 删除客户
        customerService.delete(customer);
        
    // 再删除文件(如果在增加时没有文件，则删除时会报null异常)
        File file = new File(filepath);
        if(file.exists()){
            file.delete();
        }
        
        return "delete";
    }
}
#+END_SRC

**** 在spring中配置Action的注入
src/applicationContext.xml
#+BEGIN_SRC nxml
<!-- 配置客户模块 -->
<bean id="customerAction" class="com.atcast.web.action.CustomerAction"
    scope="prototype">
    <property name="customerService" ref="customerService" />
</bean>
<!-- 字典 -->
<bean id="dictAction" class="com.atcast.web.action.DictAction"
    scope="prototype">
    <property name="dictService" ref="dictService" />
</bean>
#+END_SRC

**** 增加客户页面
WebRoot/jsp/customer/add.jsp
#+BEGIN_SRC html
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<TITLE>添加客户</TITLE> 
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<LINK href="${pageContext.request.contextPath }/css/Style.css" type=text/css rel=stylesheet>
<LINK href="${pageContext.request.contextPath }/css/Manage.css" type=text/css
    rel=stylesheet>
<META content="MSHTML 6.00.2900.3492" name=GENERATOR>
<script type="text/javascript" src="${pageContext.request.contextPath }/js/jquery-1.11.3.min.js"></script>

<script type="text/javascript">
    //页面的加载
    $(function(){
        // 发送ajax的请求
        var url = "${ pageContext.request.contextPath }/dict_findByCode.action";
        var param = {"dict_type_code":"006"};
        $.post(url,param,function(data){
            // 遍历
            $(data).each(function(i,n){
                $("#levelId").append("<option value='"+n.dict_id+"'>"+n.dict_item_name+"</option>");
            });
        },"json");
        
        // 获取来源
        var param = {"dict_type_code":"002"};
        $.post(url,param,function(data){
            // 遍历
            $(data).each(function(i,n){
                $("#sourceId").append("<option value='"+n.dict_id+"'>"+n.dict_item_name+"</option>");
            });
        },"json");
    });
    
</script>

</HEAD>
<BODY>
    <FORM id=form1 name=form1 action="${pageContext.request.contextPath }/customer_save.action" method="post" enctype="multipart/form-data">
        
        <TABLE cellSpacing=0 cellPadding=0 width="98%" border=0>
            <TBODY>
                <TR>
                    <TD width=15><IMG src="${pageContext.request.contextPath }/images/new_019.jpg"
                        border=0></TD>
                    <TD width="100%" background="${pageContext.request.contextPath }/images/new_020.jpg"
                        height=20></TD>
                    <TD width=15><IMG src="${pageContext.request.contextPath }/images/new_021.jpg"
                        border=0></TD>
                </TR>
            </TBODY>
        </TABLE>
        <TABLE cellSpacing=0 cellPadding=0 width="98%" border=0>
            <TBODY>
                <TR>
                    <TD width=15 background=${pageContext.request.contextPath }/images/new_022.jpg><IMG
                        src="${pageContext.request.contextPath }/images/new_022.jpg" border=0></TD>
                    <TD vAlign=top width="100%" bgColor=#ffffff>
                        <TABLE cellSpacing=0 cellPadding=5 width="100%" border=0>
                            <TR>
                                <TD class=manageHead>当前位置：客户管理 &gt; 添加客户</TD>
                            </TR>
                            <TR>
                                <TD height=2></TD>
                            </TR>
                        </TABLE>
                        
                        <TABLE cellSpacing=0 cellPadding=5  border=0>
                            
                            <TR>
                                <td>客户名称：</td>
                                <td>
                                <INPUT class=textbox id=sChannel2
                                                        style="WIDTH: 180px" maxLength=50 name="cust_name">
                                </td>
                                <td>客户级别 ：</td>
                                <td>
                                    <select name="level.dict_id" id="levelId"></select>
                                </td>
                            </TR>
                            
                            <TR>
                                <td>信息来源 ：</td>
                                <td>
                                    <select name="source.dict_id" id="sourceId"></select>
                                </td>
                                <td>联系人：</td>
                                <td>
                                <INPUT class=textbox id=sChannel2
                                                        style="WIDTH: 180px" maxLength=50 name="cust_linkman">
                                </td>
                            </TR>
                            
                            <TR>
                                
                                
                                <td>固定电话 ：</td>
                                <td>
                                <INPUT class=textbox id=sChannel2
                                                        style="WIDTH: 180px" maxLength=50 name="cust_phone">
                                </td>
                                <td>移动电话 ：</td>
                                <td>
                                <INPUT class=textbox id=sChannel2
                                                        style="WIDTH: 180px" maxLength=50 name="cust_mobile">
                                </td>
                            </TR>
                            
                            <TR>
                                <td>联系地址 ：</td>
                                <td>
                                <INPUT class=textbox id=sChannel2
                                                        style="WIDTH: 180px" maxLength=50 name="custAddress">
                                </td>
                                <td>邮政编码 ：</td>
                                <td>
                                <INPUT class=textbox id=sChannel2
                                                        style="WIDTH: 180px" maxLength=50 name="custZip">
                                </td>
                            </TR>
                            <TR>
                                <td>客户传真 ：</td>
                                <td>
                                <INPUT class=textbox id=sChannel2
                                                        style="WIDTH: 180px" maxLength=50 name="custFax">
                                </td>
                                
                                <td>上传资质：</td>
                                <td>
                                    <input type="file" name="upload" />
                                </td>
                            </TR>
                            <tr>
                                <td rowspan=2>
                                <INPUT class=button id=sButton2 type=submit value="保存 " name=sButton2>
                                </td>
                            </tr>
                        </TABLE>
                        
                        
                    </TD>
                    <TD width=15 background="${pageContext.request.contextPath }/images/new_023.jpg">
                    <IMG src="${pageContext.request.contextPath }/images/new_023.jpg" border=0></TD>
                </TR>
            </TBODY>
        </TABLE>
        <TABLE cellSpacing=0 cellPadding=0 width="98%" border=0>
            <TBODY>
                <TR>
                    <TD width=15><IMG src="${pageContext.request.contextPath }/images/new_024.jpg"
                        border=0></TD>
                    <TD align=middle width="100%"
                        background="${pageContext.request.contextPath }/images/new_025.jpg" height=15></TD>
                    <TD width=15><IMG src="${pageContext.request.contextPath }/images/new_026.jpg"
                        border=0></TD>
                </TR>
            </TBODY>
        </TABLE>
    </FORM>
</BODY>
</HTML>
#+END_SRC

**** 修改客户页面
WebRoot/jsp/customer/edit.jsp
#+BEGIN_SRC html
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<TITLE>添加客户</TITLE> 
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<LINK href="${pageContext.request.contextPath }/css/Style.css" type=text/css rel=stylesheet>
<LINK href="${pageContext.request.contextPath }/css/Manage.css" type=text/css
    rel=stylesheet>
<script type="text/javascript" src="${pageContext.request.contextPath }/js/jquery-1.11.3.min.js"></script>
<script type="text/javascript">
//页面加载完后做异步查询客户级别和来源
    $(function(){
        // 发送ajax的请求
        var url = "${ pageContext.request.contextPath }/dict_findByCode.action";
        var param = {"dict_type_code":"006"};
        $.post(url,param,function(data){
            // 遍历，i迭代下标值，n迭代对象
            $(data).each(function(i,n){
                // 先获取值栈中的值，使用EL表达式
                //model就是Customer类的对象，level是Dict类的对象
                var vsId = "${model.level.dict_id}";
                //alert(vsId);
                // 值栈中的id值和遍历的id值相同，让其被选中。否则会变成"请选择"
                if(vsId == n.dict_id){
                    // JQ的DOM操作
                    $("#levelId").append("<option value='"+n.dict_id+"' selected>"+n.dict_item_name+"</option>");
                }else{
                    $("#levelId").append("<option value='"+n.dict_id+"'>"+n.dict_item_name+"</option>");
                }
            });
        },"json");
        
        // 获取来源
        var param = {"dict_type_code":"002"};
        $.post(url,param,function(data){
            // 遍历
            $(data).each(function(i,n){
                var vsId = "${model.source.dict_id}";
                if(vsId == n.dict_id){
                    // JQ的DOM操作
                    $("#sourceId").append("<option value='"+n.dict_id+"' selected>"+n.dict_item_name+"</option>");
                }else{
                    $("#sourceId").append("<option value='"+n.dict_id+"'>"+n.dict_item_name+"</option>");
                }
            });
        },"json");
    });
</script>
<META content="MSHTML 6.00.2900.3492" name=GENERATOR>
</HEAD>
<BODY>
    <!-- 修改也需要上传文件 -->
    <FORM id=form1 name=form1
        action="${pageContext.request.contextPath }/customer_update.action" method="post" enctype="multipart/form-data">
        <!-- 隐藏客户的主键 -->
        <input type="hidden" name="cust_id" value="${model.cust_id }"/>
        <!-- 隐藏文件上传的路径 -->
        <input type="hidden" name="filepath" value="${model.filepath }"/>
        <TABLE cellSpacing=0 cellPadding=0 width="98%" border=0>
            <TBODY>
                <TR>
                    <TD width=15><IMG src="${pageContext.request.contextPath }/images/new_019.jpg"
                        border=0></TD>
                    <TD width="100%" background=${pageContext.request.contextPath }/images/new_020.jpg
                        height=20></TD>
                    <TD width=15><IMG src="${pageContext.request.contextPath }/images/new_021.jpg"
                        border=0></TD>
                </TR>
            </TBODY>
        </TABLE>
        <TABLE cellSpacing=0 cellPadding=0 width="98%" border=0>
            <TBODY>
                <TR>
                    <TD width=15 background=${pageContext.request.contextPath }/images/new_022.jpg><IMG
                        src="${pageContext.request.contextPath }/images/new_022.jpg" border=0></TD>
                    <TD vAlign=top width="100%" bgColor=#ffffff>
                        <TABLE cellSpacing=0 cellPadding=5 width="100%" border=0>
                            <TR>
                                <TD class=manageHead>当前位置：客户管理 &gt; 修改客户</TD>
                            </TR>
                            <TR>
                                <TD height=2></TD>
                            </TR>
                        </TABLE>
                        <TABLE cellSpacing=0 cellPadding=5  border=0>
                            <TR>
                                <td>客户名称：</td>
                                <td>
                                <INPUT class=textbox id=sChannel2
                                            style="WIDTH: 180px" maxLength=50 name="cust_name" value="${model.cust_name }">
                                </td>
                                <td>客户级别 ：</td>
                                <td>
                                    <select name="level.dict_id" id="levelId"></select>
                                </td>
                            </TR>
                            
                            <TR>
                                <td>信息来源：</td>
                                <td>
                                    <select name="source.dict_id" id="sourceId"></select>
                                </td>
        
                                <td>联系人：</td>
                                <td>
                                <INPUT class=textbox id=sChannel2
                                                        style="WIDTH: 180px" maxLength=50 name="cust_linkman" value="${model.cust_linkman }">
                                </td>
                            </TR>
                            <TR>
                                
                                
                                <td>固定电话 ：</td>
                                <td>
                                <INPUT class=textbox id=sChannel2
                                                        style="WIDTH: 180px" maxLength=50 name="cust_phone" value="${model.cust_phone }">
                                </td>
                                <td>移动电话 ：</td>
                                <td>
                                <INPUT class=textbox id=sChannel2
                                                        style="WIDTH: 180px" maxLength=50 name="cust_mobile" value="${model.cust_mobile }">
                                </td>
                            </TR>
                            
                         
                            <TR>                                 
                                <td>上传资质：</td>
                                <td>
                                    <input type="file" name="upload"/>
                                </td>
                            </TR>
                            <tr>
                                <td rowspan=2>
                                <INPUT class=button id=sButton2 type=submit
                                                        value=" 更新 " name=sButton2>
                                </td>
                            </tr>
                        </TABLE>
                        
                        
                    </TD>
                    <TD width=15 background="${pageContext.request.contextPath }/images/new_023.jpg">
                    <IMG src="${pageContext.request.contextPath }/images/new_023.jpg" border=0></TD>
                </TR>
            </TBODY>
        </TABLE>
        <TABLE cellSpacing=0 cellPadding=0 width="98%" border=0>
            <TBODY>
                <TR>
                    <TD width=15><IMG src="${pageContext.request.contextPath }/images/new_024.jpg"
                        border=0></TD>
                    <TD align=middle width="100%"
                        background="${pageContext.request.contextPath }/images/new_025.jpg" height=15></TD>
                    <TD width=15><IMG src="${pageContext.request.contextPath }/images/new_026.jpg"
                        border=0></TD>
                </TR>
            </TBODY>
        </TABLE>
    </FORM>
</BODY>
</HTML>
#+END_SRC