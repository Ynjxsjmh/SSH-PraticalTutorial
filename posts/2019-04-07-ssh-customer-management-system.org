#+OPTIONS: ':nil *:t -:t ::t <:t H:5 \n:nil ^:{} arch:headline
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:t toc:t todo:t |:t
#+TITLE: 十六、SSH 客户管理系统
#+DATE: <2019-04-07 Sun>
#+AUTHOR: Ynjxsjmh
#+EMAIL: ynjxsjmh@gmail.com
#+FILETAGS: ::

* Table of Contents                                                     :TOC_5:QUOTE:
#+BEGIN_QUOTE
- [[#用户模块][用户模块]]
  - [[#用户注册功能][用户注册功能]]
  - [[#用户登录功能][用户登录功能]]
  - [[#用户退出功能][用户退出功能]]
- [[#客户模块][客户模块]]
  - [[#查询所有客户功能][查询所有客户功能]]
  - [[#按条件查询所有的客户][按条件查询所有的客户]]
    - [[#使用异步的方式加载客户级别和客户的来源][使用异步的方式加载客户级别和客户的来源]]
    - [[#异步获取客户级别][异步获取客户级别]]
      - [[#ajax的代码][ajax的代码]]
      - [[#action的代码][Action的代码]]
      - [[#customeraction的分页查询的代码][CustomerAction的分页查询的代码]]
  - [[#添加客户功能含有文件上传功能][添加客户功能（含有文件上传功能）]]
  - [[#修改客户的功能][修改客户的功能]]
  - [[#删除客户的功能][删除客户的功能]]
  - [[#抽取通用的basedao功能][抽取通用的BaseDao功能]]
  - [[#抽取baseaction的功能][抽取BaseAction的功能]]
- [[#联系人模块][联系人模块]]
  - [[#查询联系人功能][查询联系人功能]]
  - [[#添加联系人功能][添加联系人功能]]
  - [[#修改联系人功能][修改联系人功能]]
  - [[#删除联系人功能][删除联系人功能]]
- [[#客户拜访模块][客户拜访模块]]
  - [[#搭建客户拜访表的开发环境][搭建客户拜访表的开发环境]]
  - [[#客户拜访表关系的分析][客户拜访表关系的分析]]
  - [[#客户拜访列表查询功能][客户拜访列表查询功能]]
  - [[#新增客户拜访记录功能][新增客户拜访记录功能]]
  - [[#按条件查询客户信息列表功能][按条件查询客户信息列表功能]]
- [[#统计分析模块][统计分析模块]]
  - [[#客户来源统计][客户来源统计]]
- [[#用户登录的拦截器][用户登录的拦截器]]
  - [[#用户登录的拦截器功能实现][用户登录的拦截器功能实现]]
#+END_QUOTE

* 用户模块
** 用户注册功能
1. 可以先判断登录名是否已经存在
2. 要给密码使用MD5进行加密操作
** 用户登录功能
1. 登录功能要注意需要先给密码加密后，再进行查询
    * 密码加密后再查询
    * 用户的状态必须是1，字符串类型的
** 用户退出功能
1. 把用户信息从HttpSession中清除

* 客户模块
** 查询所有客户功能
1. 数据字典表的引入
    * 数据字典表的作用：规范开发中数据的写法
    * 字段表与客户表是一对多的关系
    * 修改客户表，添加外键（使用SQLyog进行修改）
2. 创建字典表的实体和映射的配置文件
    * 编写字典表的JavaBean和映射的配置文件
    * 修改Customer的JavaBean，因为是多方，需要把外键字段换成字典对象
    * 修改Customer.hbm.xml的配置文件，配置多对一
3. 分页查询所有的客户功能实现

** 按条件查询所有的客户
*** 使用异步的方式加载客户级别和客户的来源
    * 前端使用JQuery的ajax技术
    * 后端使用fastjson的jar包
        * 导入fastjson的开发jar包fastjson-1.2.8.jar
        * String s = JSON.toJSONString(集合)
        * String s = JSON.toJSONString(对象)

    * 如果List集合中存入相同引用的对象
        * fastjson默认的情况下是进行循环检测的，去除掉死循环调用的方式
        * 可以使用JSON.toJSONString(p,SerializerFeature.DisableCircularReferenceDetect) 去除循环检测，但是就会出现死循环的效果
        * 最后可以使用注解：@JSONField(serialize=false)对指定的属性不转换成json

*** 异步获取客户级别
**** ajax的代码
#+BEGIN_SRC js
var url = "${pageContext.request.contextPath }/dict_findByCode.action";
var param = {"dict_type_code":"006"};
$.post(url,param,function(data){
    $(data).each(function(){
        var id = "${model.level.dict_id}";
        if(id == this.dict_id){
            $("#levelId").append("<option value='"+this.dict_id+"' selected>"+this.dict_item_name+"</option>");
        }else{
            $("#levelId").append("<option value='"+this.dict_id+"'>"+this.dict_item_name+"</option>");
        }
    });
},"json");
#+END_SRC

**** Action的代码
#+BEGIN_SRC java
public String findByCode(){
    List<Dict> list = dictService.findByCode(dict.getDict_type_code());
    String jsonString = FastJsonUtil.toJSONString(list);
    HttpServletResponse response = ServletActionContext.getResponse();
    FastJsonUtil.write_json(response, jsonString);
    return NONE;
}
#+END_SRC

**** CustomerAction的分页查询的代码
#+BEGIN_SRC java
public String findByPage(){
    // 调用service业务层
    DetachedCriteria criteria = DetachedCriteria.forClass(Customer.class);
    // 拼接查询的条件
    String name = customer.getCust_name();
    if(name != null && !name.trim().isEmpty()){
        criteria.add(Restrictions.like("cust_name", "%"+name+"%"));
    }

    // System.out.println(customer.getLevel().getDict_type_code());
    Dict level = customer.getLevel();
    if(level != null && !level.getDict_id().trim().isEmpty()){
        criteria.add(Restrictions.eq("level.dict_id", level.getDict_id()));
    }

    Dict source = customer.getSource();
    if(source != null && !source.getDict_id().trim().isEmpty()){
        criteria.add(Restrictions.eq("source.dict_id", source.getDict_id()));
    }

    // 查询
    PageBean<Customer> page = customerService.findByPage(pageCode,pageSize,criteria);
    // 压栈
    ValueStack vs = ActionContext.getContext().getValueStack();
    // 栈顶是map<"page",page对象>
    vs.set("page", page);
    vs.set("cust_name", name);
    return "page";
}
#+END_SRC


** 添加客户功能（含有文件上传功能）
1. 跳转到客户的添加页面，需要通过ajax来显示客户的级别，客户的来源和客户的行业。
2. 添加文件上传的选择项
3. 客户端三个注意事项
    * method="post"
    * enctype="multipart/form-data"
    * <input type="file" name="myfile">
4. Struts2框架的使用拦截器完成了文件上传，并且底层使用也是FileUpload开源的组件。
    * 提供 FileUpload 拦截器，用于解析 multipart/form-data 编码格式请求，解析上传文件内容 
    * fileUpload拦截器 默认在 defaultStack 栈中， 默认会执行的 

    * 在Action中编写文件上传，需要定义三个属性
        1. 文件类型File ,属性名与表单中file的name属性名一致.
        2. 字符串类型String , 属性名：前段是name属性名一致 + ContentType;
        3. 字符串类型String , 属性名：前段是name属性名一致+FileName;

        > 最后需要为上述的三个属性提供set方法。
        > 可以通过FileUtils提供 copyFile 进行文件复制，将上传文件 保存到服务器端 
4. 文件上传中存在的问题
    * 先配置input逻辑视图
    * 在页面中显示错误信息
    * 文件上传的总大小默认值是2M，如果超过了2M，程序会报出异常。可以使用<s:actionError>来查看具体信息！

        > 解决总大小的设置，找到常量：
            * struts.multipart.parser=jakarta -- 默认文件上传解析器，就是FileUpload组件
            * struts.multipart.saveDir=       -- 文件上传的临时文件存储目录
            * struts.multipart.maxSize=2097152  -- 文件上传的最大值（总大小），默认是2M

        > 可以在struts.xml中设置常量，修改文件上传的默认总大小！！！
            * <constant name="struts.multipart.maxSize" value="5000000"></constant>

5. 还可以通过配置拦截器来设置文件上传的一些属性
- 先在<action>标签中引入文件上传的拦截器
#+BEGIN_SRC nxml
<interceptor-ref name="defaultStack">
    <!-- 设置单个上传文件的大小 -->
    <param name="fileUpload.maximumSize">2097152</param>
    <!-- 设置扩展名 -->
    <param name="fileUpload.allowedExtensions">.txt</param>
</interceptor-ref>
#+END_SRC

** 修改客户的功能
1. 先通过客户的主键查询出客户的详细信息，显示到修改的页面上
    * 要把客户的主键和上传文件的路径使用隐藏域保存起来
    * 在edit.jsp中，把客户的网络地址等信息删除掉，没有用这些字段。
2. 修改客户的信息
    * 修改表单的enctype属性（enctype="multipart/form-data"）
    * 给edit.jsp页面添加文件上传项（）
    * 如果用户新上传了文件，删除旧的文件，上传新的文件。
    * 如果用户没有上传新文件，正常更新。
3. 如果要客户和联系人配置了一对多
    * 再修改客户的时候，由于Customer对象中linkmans的set中没有值，所以在默认修改Customer的时候，会把set集合中的Linkman的外键设置成null
    * 创建linkman的SQL语句中，要求外键是不能为null的
        * <set name="linkmans" inverse="true">

** 删除客户的功能
1. 删除上传的文件后，再删除客户信息。

** 抽取通用的BaseDao功能
1. 通过上面编写的一些功能，DAO层的代码相对比较固定，所以可以想办法来抽取出通用的方法
2. 代码如下
#+BEGIN_SRC java
private Class clazz;
public BaseDaoImpl(){
    Class c = this.getClass();
    Type type = c.getGenericSuperclass();
    // 判断
    if(type instanceof ParameterizedType){
        ParameterizedType ptype = (ParameterizedType) type;
        // 获取实际类型参数
        Type[] types = ptype.getActualTypeArguments();
        // 获取0位置的值
        clazz = (Class) types[0];
    }
}
#+END_SRC

** 抽取BaseAction的功能
1. Action需要完成分页的代码，需要接收pageCode和pageSize的请求参数，可以编写BaseAction用来接收分页的请求参数

#+BEGIN_SRC java
private Integer pageCode = 1;
public void setPageCode(Integer pageCode) {
    if(pageCode == null){
        pageCode = 1;
    }
    this.pageCode = pageCode;
}
public Integer getPageCode() {
    return pageCode;
}

// 每页显示的数据的条数
private Integer pageSize = 2;
public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
}
public Integer getPageSize() {
    return pageSize;
}

public void setVs(String key,Object obj){
    ActionContext.getContext().getValueStack().set(key, obj);
}
public void pushVs(Object obj){
    ActionContext.getContext().getValueStack().push(obj);
}
#+END_SRC

* 联系人模块
** 查询联系人功能
1. 分页显示所有的联系人的数据
** 添加联系人功能
1. 
** 修改联系人功能
1.
** 删除联系人功能
1. 

* 客户拜访模块
** 搭建客户拜访表的开发环境
#+BEGIN_SRC sql
CREATE TABLE `sale_visit` (
  `visit_id` VARCHAR(32) NOT NULL,
  `visit_cust_id` BIGINT(32) DEFAULT NULL COMMENT '客户id',
  `visit_user_id` BIGINT(32) DEFAULT NULL COMMENT '负责人id',
  `visit_time` VARCHAR(32) DEFAULT NULL COMMENT '拜访时间',
  `visit_interviewee` VARCHAR(32) DEFAULT NULL COMMENT '被拜访人',
  `visit_addr` VARCHAR(128) DEFAULT NULL COMMENT '拜访地点',
  `visit_detail` VARCHAR(256) DEFAULT NULL COMMENT '拜访详情',
  `visit_nexttime` VARCHAR(32) DEFAULT NULL COMMENT '下次拜访时间',
  PRIMARY KEY (`visit_id`),
  KEY `FK_sale_visit_cust_id` (`visit_cust_id`),
  KEY `FK_sale_visit_user_id` (`visit_user_id`),
  CONSTRAINT `FK_sale_visit_cust_id` FOREIGN KEY (`visit_cust_id`) REFERENCES `cst_customer` (`cust_id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `FK_sale_visit_user_id` FOREIGN KEY (`visit_user_id`) REFERENCES `sys_user` (`user_id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=INNODB DEFAULT CHARSET=utf8;
#+END_SRC

** 客户拜访表关系的分析

https://raw.githubusercontent.com/Ynjxsjmh/ynjxsjmh.github.io/master/img/2019/2019-04-07-02-01.png

1. 客户关系拜访表是该系统的用户和客户之间的关系建立表
    * 用户可以拜访多个客户
    * 客户也可以被多个用户所拜访
    * 所以，用户和客户之间应该是多对多的关系，那么客户拜访表就是用户和客户的中间表。
    * 正常的情况下，在用户和客户中添加set集合，在映射的配置文件中配置<set>标签即可。
    * 但是现在客户拜访中间表中存在其他的字段，默认的情况下，中间表只能维护外键。而不能维护其他的字段。所以需要把一对多拆开成两个一对多。
2. 用户与客户拜访表是一对多的关系
3. 客户与客户拜访表是一对多的关系
4. 创建客户拜访表的实体类和映射配置文件
5. 编写客户拜访的Action等类和完成配置
    * 先开启注解的扫描
        * <context:component-scan base-package="com.itheima"/>
    * Action编写（@RestController(value="visitAction") @Scope(value="prototype")）
    * Service编写（@Service(value="visitService") @Transactional）
    * Dao编写（@Repository(value="visitDao")）
        * 重点是dao中注入SessionFactory对象
            @Resource(name="sessionFactory")
            public void sSessionFactory(SessionFactory sessionFactory){
                // 重点的代码
                super.setSessionFactory(sessionFactory);
            }

** 客户拜访列表查询功能
1. 先导入客户拜访的页面
    * 在资料中的（visit文件夹和jquery文件夹）
        * visit文件夹复制到jsp的目录下
        * jquery文件夹复制到WebContent目录下
2. 查询我的客户拜访记录
    * 登录的用户，点击客户拜访列表，查询该用户下的所有的拜访记录
    * 通过用户的主键查询该用户下的所有的拜访记录

** 新增客户拜访记录功能
1. 点击新增客户拜访功能菜单，跳转到新增页面，输入信息，保存数据
    * 从HttpSession中获取到用户的信息，设置到拜访记录中，保存到数据库中

** 按条件查询客户信息列表功能
1. 修改list.jsp的页面，添加开始和结束日期的选项
#+BEGIN_SRC html
<TD>拜访时间：</TD>
<TD>
    <INPUT class=textbox id="beginDate" style="WIDTH: 80px" maxLength=50 name="beginDate">
    至
    <INPUT class=textbox id="endDate" style="WIDTH: 80px" maxLength=50 name="endDate">
</TD>
#+END_SRC

* 统计分析模块
** 客户来源统计
1. 想要统计客户的来源，即该来源下有多少个客户
    * SQL语句： =SELECT d.dict_item_name,COUNT(*) FROM base_dict d,cst_customer c WHERE d.dict_id = c.cust_source GROUP BY d.dict_id;=
    * HQL语句： =String hql = "select c.source.dict_item_name,COUNT(*) from Customer c inner join c.source GROUP BY c.source";=

* 用户登录的拦截器
** 用户登录的拦截器功能实现
1. 功能：如果用户没有登录，是不能操作后台的功能的！！
2. 代码如下
#+BEGIN_SRC java
public class UserInterceptor extends MethodFilterInterceptor{
    private static final long serialVersionUID = 335018670739692955L;
    /**
     * 进行拦截的方法
     */
    protected String doIntercept(ActionInvocation invocation) throws Exception {
        // 获取session对象
        User user = (User) ServletActionContext.getRequest().getSession().getAttribute("existUser");
        if(user == null){
            // 说明，没有登录，后面就不会执行了
            return "login";
        }
        return invocation.invoke();
    }
}
#+END_SRC
3. 配置如下
#+BEGIN_SRC nxml
<interceptors>
    <interceptor name="UserInterceptor" class="com.itheima.web.interceptor.UserInterceptor"/>
</interceptors>
<interceptor-ref name="UserInterceptor">
    <!-- login方法不拦截 -->
    <param name="excludeMethods">login</param>
</interceptor-ref>
<interceptor-ref name="defaultStack"/>
#+END_SRC
