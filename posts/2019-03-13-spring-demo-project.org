#+OPTIONS: ':nil *:t -:t ::t <:t H:5 \n:nil ^:{} arch:headline
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:t toc:t todo:t |:t
#+TITLE: 十一、Spring 入门
#+DATE: <2019-03-13 Tue>
#+AUTHOR: Ynjxsjmh
#+EMAIL: ynjxsjmh@gmail.com
#+FILETAGS: ::

这是一个 Java 项目，不是 web 项目。

* 导入包
| commons-logging-1.1.3.jar           | 日志               |
| spring-beans-3.2.5.RELEASE.jar      | bean节点           |
| spring-context-3.2.5.RELEASE.jar    | spring上下文节点   |
| spring-core-3.2.5.RELEASE.jar       | spring核心功能     |
| spring-expression-3.2.5.RELEASE.jar | spring表达式相关表 |

以上是必须引入的5个jar文件

* 样例 1
** User对象
User.java
#+BEGIN_SRC java
package cn.atcast.a_hello;
public class User {
    private int id;
    private String name;

    public User() {
        super();
        System.out.println("------User对象创建------");
    }

    public int getId() {
        return id;
    }
    public void setId(int id) {
        this.id = id;
    }
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
    
    public void init_user() {
        System.out.println("创建对象之后，初始化");
    }
    public void destroy_user() {
        System.out.println("IOC容器销毁，user对象回收!");
    }
}
#+END_SRC

** spring配置文件
Spring 配置文件放在和 User 类同一目录下。

原来创建 User 对象是通过 User user = new User() 来创建的。现在我们通过定义配置文件将这一步骤交给 Spring 来做。

定义的 id 属性是 User 类的实例名称，比如 user1 对应的就是 User user1 = new User()

applicationContext.xml
#+BEGIN_SRC nxml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">
    
    <!-- IOC容器的配置： 要创建的所有的对象都配置在这里 -->
    <bean id="user" class="cn.atcast.a_hello.User" init-method="init_user" destroy-method="destroy_user" scope="singleton" lazy-init="false"></bean>

    <bean id="user1" class="cn.atcast.a_hello.User"></bean>
</beans> 
#+END_SRC

这里 Spring 通过配置文件里的 class 里的包名加类名拿到这个 User 类，然后通过 =User.class 的 newInstance() 方法生成 user 对象来= ，这默认调用的是无参的构造方法。如果在 User 类中使用含参构造方法重载了默认的无参构造方法，我们最好同时显式的写出无参的构造方法。

因为构建的是 Java 项目，所以这里 destroy-method 看不出效果。想要看出效果，我们得启动容器（可以是 Tomcat）

** 测试1
App1_get_ioc.java
#+BEGIN_SRC java
package cn.atcast.a_hello;

import org.junit.Test;
import org.springframework.beans.factory.BeanFactory;
import org.springframework.beans.factory.xml.XmlBeanFactory;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.Resource;

public class App1_get_ioc {
    // 1. 通过工厂类得到IOC容器创建的对象
    @Test
    public void testIOC() throws Exception {
        // 创建对象
        // 原来创建对象是 User user = new User();
        // 现在，把对象的创建交给spring的IOC容器
        // 读配置文件的方式有很多种，这里只是其中一种，这种过时了。
        Resource resource = new ClassPathResource("cn/atcast/a_hello/applicationContext.xml");
        // 创建容器对象(Bean的工厂), IOC容器 = 工厂类 + applicationContext.xml
        BeanFactory factory = new XmlBeanFactory(resource);
        // 得到容器创建的对象，getBean 的参数就是刚才写的配置文件里的 id
        User user = (User) factory.getBean("user");
        System.out.println(user.getId());
    }
    
    //2. （方便）直接得到IOC容器对象 
    @Test
    public void testAc() throws Exception {
        // 得到IOC容器对象
        ApplicationContext ac = new ClassPathXmlApplicationContext("cn/itcast/a_hello/applicationContext.xml");
        // 从容器中获取bean
        User user = (User) ac.getBean("user");
        System.out.println(user);
        // 这种方法只是在测试的时候这样用，整合的时候是另一种方法拿到 bean——自动注入。
    }
}
#+END_SRC

** 测试2 
App2_bean.java
#+BEGIN_SRC java
package cn.atcast.a_hello;

import org.junit.Test;
import org.springframework.beans.factory.BeanFactory;
import org.springframework.beans.factory.xml.XmlBeanFactory;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.Resource;

public class App2_bean {
    @Test
    public void testIOC() throws Exception {
        // 得到IOC容器对象  【用实现类，因为要调用销毁的方法】
        ClassPathXmlApplicationContext ac = new ClassPathXmlApplicationContext("cn/atcast/a_hello/applicationContext.xml");
        System.out.println("-----容器创建-----");
        
        // 从容器中获取bean
        User user1 = (User) ac.getBean("user");
        User user2 = (User) ac.getBean("user");
        
        System.out.println(user1);
        System.out.println(user2);
        
        // 销毁容器对象 
        ac.destroy();
    }
}
#+END_SRC

** bean对象创建细节
1. 对象创建： 单例/多例
| scope="singleton" | 默认值，即默认是单例 【service/dao/工具类】 |
| scope="prototype" | 多例；               【Action对象】         |
2. 什么时候创建?  
| scope="singleton" | 在启动(容器初始化之前)，就已经创建了bean，且整个应用只有一个。 |
| scope="prototype" | 在用到对象的时候，才创建对象。                                 |
3. 是否延迟创建
| lazy-init="false" | 默认为false，不延迟创建，即在启动时候就创建对象      |
| lazy-init="true"  | 延迟初始化，在用到对象的时候才创建对象(只对单例有效) |
一般这里不做设置，即使用默认的 false
4. 创建对象之后，初始化/销毁
| init-method="init_user"       | 【对应对象的init_user方法，在对象创建爱之后执行 】 |
| destroy-method="destroy_user" | 【在调用容器对象的destroy方法时候执行】            |

* 样例 2
** 创建对象方式
SpringIOC容器，是spring核心内容。

作用: 创建对象并处理对象的依赖关系

IOC容器创建对象：(使用了反射)

创建对象, 有几种方式：
1. 调用无参数构造器
2. 带参数构造器
3. 工厂创建对象（工厂创建模式）
        - 工厂类，静态方法创建对象
        - 工厂类，非静态方法创建对象

** User 对象
User.java
#+BEGIN_SRC java
package cn.atcast.b_create_obj;
public class User {
    private int id;
    private String name;
    public User() {
        super();
        System.out.println("-User对象创建【无参数构造器】");
    }
    
    public User(int id, String name) {
        System.out.println("-----User对象创建【带参数构造器】");
        this.id = id;
        this.name = name;
    }

    public int getId() {
        return id;
    }
    public void setId(int id) {
        this.id = id;
    }
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
    @Override
    public String toString() {
        return "User [id=" + id + ", name=" + name + "]";
    }

    public void init_user() {
        System.out.println("创建对象之后，初始化");
    }
    public void destroy_user() {
        System.out.println("IOC容器销毁，user对象回收!");
    }
}
#+END_SRC

** bean.xml(Spring 对象创建方法)
含参构造函数的参数通过设置 constructor-tag 节点的值传入。

ref 解决了对象之间的依赖关系，其值是另一个对象的 id。

#+BEGIN_SRC nxml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">
    
    <!-- ###############对象创建############### -->
    
    <!-- 1. 默认无参数构造器 -->
    <!-- User user = new User() -->
    <bean id="user1" class="cn.atcast.b_create_obj.User"></bean>
    
    <!-- 2. 带参数构造器 -->
    <!-- User user = new User(1, "Tom") -->
    <bean id="user2" class="cn.atcast.b_create_obj.User">
        <constructor-arg index="0" type="int" value="100"></constructor-arg>
            <!-- 引用类型必须写全名 -->
        <constructor-arg index="1" type="java.lang.String" value="Jack"></constructor-arg>
    </bean>
    <!-- 定义一个字符串，值是"Jack" ;  String s = new String("jack")-->
    <bean id="str" class="java.lang.String">
        <constructor-arg value="Jack"></constructor-arg>
    </bean>
    <bean id="user3" class="cn.atcast.b_create_obj.User">
        <constructor-arg index="0" type="int" value="100"></constructor-arg>
        <constructor-arg index="1" type="java.lang.String" ref="str"></constructor-arg>
    </bean>
    
    <!-- 3. 工厂类创建对象 -->
    <!-- # 3.1 工厂类，实例方法 -->
    <!-- 先创建工厂 -->
    <bean id="factory" class="cn.atcast.b_create_obj.ObjectFactory"></bean>
    <!-- 告诉 Spring 通过哪个工厂的哪个方法创建对象 -->
    <!-- 再创建user对象，用factory方的实例方法 -->
    <bean id="user4" factory-bean="factory" factory-method="getInstance"></bean>
    
    <!-- # 3.2 工厂类： 静态方法 -->
    <!-- 
        class 指定的就是工厂类型
        factory-method  一定是工厂里面的“静态方法”
     -->
    <bean id="user5" class="cn.atcast.b_create_obj.ObjectFactory" factory-method="getStaticInstance"></bean>
</beans>
#+END_SRC

** ObjectFactory.java
#+BEGIN_SRC java
package cn.atcast.b_create_obj;
// 工厂，创建对象
public class ObjectFactory {
    // 实例方法创建对象
    public User getInstance() {
        return new User(100,"工厂：调用实例方法");
    }
    
    // 静态方法创建对象
    public static User getStaticInstance() {
        return new User(101,"工厂：调用静态方法");
    }
}
#+END_SRC

** 测试类
App.java
#+BEGIN_SRC java
package cn.atcast.b_create_obj;
import org.junit.Test;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class App {
    // 测试：对象创建
    @Test
    public void testIOC() throws Exception {
        // 创建IOC容器对象
        ApplicationContext ac = new ClassPathXmlApplicationContext("cn/atcast/b_create_obj/bean.xml");
        // 获取容器中的对象
        User user = (User) ac.getBean("user5");
        System.out.println(user);
    }
}
#+END_SRC

* 样例 3
** 对象依赖关系
解决控制层如何调用业务层，业务层如何调用 DAO 层。以前是最原始的手动 new。现在主要用下面的前两种和最后一种。

Spring中给对象的属性赋值的五种方式
1. **通过构造函数（还有通过注解方式引入对象）**
2. **通过set方法给属性注入值（比注解麻烦，开发时大部分通过注解方式）**
3. p名称空间（很少用）
4. 自动装配(了解，此方式不好维护)
5. 注解 

** set 方法
*** User 对象
User.java
#+BEGIN_SRC java
package cn.atcast.c_property;
public class User {
    private int id;
    private String name;
    
    //通过容器注入属性值
    public void setId(int id) {
        this.id = id;
    }
    //通过容器注入属性值
    public void setName(String name) {
        this.name = name;
    }
    
    public int getId() {
        return id;
    }
    
    public String getName() {
        return name;
    }
    
    @Override
    public String toString() {
        return "User [id=" + id + ", name=" + name + "]";
    }
    
    public User() {
        super();
        System.out.println("---User对象创建【无参数构造器");
    }
    
    public User(int id, String name) {
        System.out.println("User对象创建【带参数构造器】");
        this.id = id;
        this.name = name;
    }

    public void init_user() {
        System.out.println("创建对象之后，初始化");
    }
    public void destroy_user() {
        System.out.println("IOC容器销毁，user对象回收!");
    }
}
#+END_SRC

*** UserDao.java
#+BEGIN_SRC java
package cn.atcast.c_property;
public class UserDao {
    public void save() {
        System.out.println("DB:保存用户");
    }
}
#+END_SRC

*** UserService.java
#+BEGIN_SRC java
package cn.atcast.c_property;
public class UserService {
    private UserDao userDao; // = new UserDao();
    // IOC：对象的创建交给spring的外部容器完成
    public void setUserDao(UserDao userDao) {
        this.userDao = userDao;
    }
    public void save() {
        userDao.save();
    }
}
#+END_SRC

*** UserAction.java
#+BEGIN_SRC java
package cn.atcast.c_property;
public class UserAction {
    // Service: springIOC容器注入
    private UserService userService;
public void setUserService(UserService userService) {
        this.userService = userService;
    }

    public String execute() {
        userService.save();
        return null;
    }
}
#+END_SRC

*** bean.xml
#+BEGIN_SRC nxml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">
    
    <!-- ###############对象属性赋值############### -->
    <!--  1) 通过构造函数 -->
    <bean id="user1" class="cn.atcast.c_property.User" scope="prototype">
        <constructor-arg value="100"></constructor-arg>
        <constructor-arg value="Tom"></constructor-arg>
    </bean>
    <!-- 2) 通过set方法给属性注入值 -->
    <bean id="user2" class="cn.atcast.c_property.User" scope="prototype">
        <property name="id" value="101"></property>
        <property name="name" value="Jack"></property>
    </bean>
    
    <!-- action/service/dao -->
    <!-- dao instance -->
    <bean id="userDao" class="cn.atcast.c_property.UserDao"></bean>

    <!-- service instance -->
    <bean id="userService" class="cn.atcast.c_property.UserService">
        <property name="userDao" ref="userDao"></property>
    </bean>
    
    <!-- action instance -->
    <bean id="userAction1" class="cn.atcast.c_property.UserAction">
        <property name="userService" ref="userService"></property>
    </bean>
    
    <!-- ##############内部bean############## -->
    <bean id="userAction2" class="cn.atcast.c_property.UserAction">

        <property name="userService">
            <bean class="cn.atcast.c_property.UserService">
                <property name="userDao">
                    <bean class="cn.atcast.c_property.UserDao"></bean>
                </property>
            </bean>
        </property> <!--不推荐-->

<property name="userService"> ref="userService"     </property>

    </bean>
</beans>
#+END_SRC

** p 名称空间
*** bean_p.xml
#+BEGIN_SRC nxml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p"
   xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">
    
    <!-- 3. p名称空间
        给对象属性注入值：
            # p 名称空间给对象的属性注入值
             (spring3.0以上版本才支持)
     -->
     <bean id="userDao" class="cn.atcast.c_property.UserDao"></bean>
     
     <bean id="userService" class="cn.atcast.c_property.UserService" p:userDao-ref="userDao"></bean>
     
     <bean id="userAction" class="cn.atcast.c_property.UserAction" p:userService-ref="userService"></bean>
    
    <!-- 传统的注入： 
     <bean id="user" class="cn.atcast.c_property.User" >
        <property name="name" value="xxx"></property>
     </bean>
    -->
    <!-- p名称空间优化后 -->
    <bean id="user" class="cn.atcast.c_property.User" p:name="Jack0001"></bean>
</beans>
#+END_SRC

*** App_p.java
#+BEGIN_SRC java
package cn.atcast.c_property;
import org.junit.Test;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
public class App_p {
    // 创建容器对象
    private ApplicationContext ac = new ClassPathXmlApplicationContext("cn/atcast/c_property/bean_p.xml");
    
    @Test
    public void testExecuteAction() {
        // 从容器中获取Action
        UserAction userAction = (UserAction) ac.getBean("userAction");
        userAction.execute();
        System.out.println(ac.getBean("user"));
    }
}
#+END_SRC

** 自动装配（开发一时爽，维护火葬场）
- 根据名称自动装配：autowire="byName"
自动去IOC容器中找与属性名同名的引用的对象，并自动注入
byName 通过参数名自动装配，如果一个bean的name 和另外一个bean的 property 相同，就自动装配。 （需要在bean节点中加入name属性）
也可以定义到全局， 这样就不用每个bean节点都去写autowire=”byName” 

- 根据类型自动装配：autowire="byType"
byType通过参数的数据类型自动自动装配，如果一个bean的数据类型和另外一个bean的property属性的数据类型兼容，就自动装配
必须确保该类型在IOC容器中只有一个对象，否则报错。

*** UserDao.java
#+BEGIN_SRC java
package cn.atcast.d_auto;
public class UserDao {
    public void save() {
        System.out.println("DB:保存用户");
    }
}
#+END_SRC

*** UserService.java
#+BEGIN_SRC java
package cn.atcast.d_auto;
public class UserService {
    private UserDao userDao; // = new UserDao();
    // IOC：对象的创建交给spring的外部容器完成
    public void setUserDao(UserDao userDao) {
        this.userDao = userDao;
    }

    public void save() {
        userDao.save();
    }
}
#+END_SRC

*** UserAction.java
#+BEGIN_SRC java
package cn.atcast.d_auto;
public class UserAction {
    // Service: springIOC容器注入
    private UserService userService;
    public void setUserService(UserService userService) {
        this.userService = userService;
    }
    public String execute() {
        userService.save();
        return null;
    }
}
#+END_SRC

*** bean.xml
#+BEGIN_SRC nxml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd" default-autowire="byType">
    
    <!-- ###############自动装配############### -->  
    <bean id="userDao" class="cn.atcast.d_auto.UserDao"></bean> 
    <bean id="userService" class="cn.atcast.d_auto.UserService"></bean>
    
<!--如果根据类型自动装配： 必须确保IOC容器中只有一个该类型的对象 -->
    <bean id="userAction" class="cn.atcast.d_auto.UserAction"></bean>
    
    <!--   报错： 因为上面已经有一个该类型的对象，且使用了根据类型自动装配-->
    <!--因为在userAction中有一个数据类型为UserService的属性，而在此处有两个bean的class都是UserService，所以不知道用那个，会报错-->
    <bean id="userService_test" class="cn.atcast.d_auto.UserService" autowire="byType"></bean>
     
</beans>
#+END_SRC

*** 测试类
App.java
#+BEGIN_SRC java
package cn.atcast.d_auto;

import org.junit.Test;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class App {
    // 创建容器对象
    private ApplicationContext ac = 
        new ClassPathXmlApplicationContext("cn/atcast/d_auto/bean.xml");

    @Test
    public void testExecuteAction() {
        // 从容器中获取Action
        UserAction userAction = (UserAction) ac.getBean("userService_test");
        userAction.execute();
    }
}
#+END_SRC

** 注解
注解方式可以简化spring的IOC容器的配置!（不用 set 方法，不用写配置文件对象依赖关系）

使用注解步骤：
1. 先引入context名称空间
~xmlns:context="http://www.springframework.org/schema/context"~
2. 开启注解扫描
~<context:component-scan base-package="cn.atcast.anno"></context:component-scan>~
3. 使用注解
通过注解的方式，把对象加入ioc容器。
创建对象以及处理对象依赖关系，相关的注解：
| @Component  | 指定把一个对象加入IOC容器           |
| @Repository | 作用同@Component； 在持久层使用     |
| @Service    | 作用同@Component； 在业务逻辑层使用 |
| @Controller | 作用同@Component； 在控制层使用     |
| @Resource   | 属性注入 byName                     |
| @Autowired  | 属性注入 byType   更倾向于用类型    |

总结：
    1.  使用注解，可以简化配置，且可以把对象加入IOC容器,及处理依赖关系(DI)
    2.  注解可以和XML配置一起使用。
    3.  @Resource的作用相当于@Autowired，只不过@Autowired按byType自动注入，而@Resource默认按 byName自动注入罢了

*** spring与Struts框架整合
Spring负责对象对象创建
Struts用Action处理请求
Spring与Struts框架整合关键点，让struts框架action对象的创建交给spring完成

*** UserDao.java
#+BEGIN_SRC java
package cn.atcast.e_anno;
import org.springframework.stereotype.Repository;
// 把当前对象加入ioc容器
//@Component("userDao")   //  相当于bean.xml 【<bean id=userDao class=".." />】
//@Component  //加入ioc容器的UserDao对象的引用名称，默认与类名一样，且第一个字母小写。
@Repository   // 在持久层可以选择用这个注解
public class UserDao {
    public void save() {
        System.out.println("DB:保存用户!!!");
    }
}
#+END_SRC

*** UserService.java
#+BEGIN_SRC java
package cn.atcast.e_anno;
import javax.annotation.Resource;
import org.springframework.stereotype.Service;
//@Component("userService")  //userService加入ioc容器
//@Component  //在控制层、持久层、业务层都使用@Component,不容易区分。
@Service   // 表示业务逻辑层的组件
public class UserService {
    // 会从IOC容器中找userDao对象，注入到当前字段
    /*
     * <bean id="" class=""> 
     *    <property name="userDao" ref="userDao" />    @Resource相当于这里的配置
     * </bean>
     */
    
//@Resource(name = "userDao") //根据名称查找（优先使用）
    @Resource   //根据类型查找 
    private UserDao userDao;
    
    public void setUserDao(UserDao userDao) {
        this.userDao = userDao;
    }

    public void save() {
        userDao.save();
    }
}
#+END_SRC

*** UserAction.java
#+BEGIN_SRC java
package cn.atcast.e_anno;
import javax.annotation.Resource;
import org.springframework.stereotype.Controller;

//@Component("userAction")  // 加入IOC容器
//@Component   //更简化的写法
@Controller  // 控制层的组件
public class UserAction {
    //@Resource(name = "userService")
    @Resource
    private UserService userService;
    public void setUserService(UserService userService) {
        this.userService = userService;
    }

    public String execute() {
        userService.save();
        return null;
    }
}
#+END_SRC

*** bean.xml
#+BEGIN_SRC nxml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">
    
    <!-- 开启注解扫描 -->
    <context:component-scan base-package="cn.atcast.e_anno"></context:component-scan>
</beans>
#+END_SRC

*** 测试类
App.java
#+BEGIN_SRC java
package cn.atcast.e_anno;
import org.junit.Test;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class App {
    // 创建容器对象
    private ApplicationContext ac = 
        new ClassPathXmlApplicationContext("cn/atcast/e_anno/bean.xml");
    @Test
    public void testExecuteAction() {
        // 从容器中获取Action
        UserAction userAction = (UserAction) ac.getBean("userAction");
        userAction.execute();
    }
}
#+END_SRC

本章源码见 =SpringDemo01=