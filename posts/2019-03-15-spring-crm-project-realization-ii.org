#+OPTIONS: ':nil *:t -:t ::t <:t H:5 \n:nil ^:{} arch:headline
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:t toc:t todo:t |:t
#+TITLE: 十四、Spring 客户管理之项目实现
#+DATE: <2019-03-15 Tue>
#+AUTHOR: Ynjxsjmh
#+EMAIL: ynjxsjmh@gmail.com
#+FILETAGS: ::

* Table of Contents                                                     :TOC_5:QUOTE:
#+BEGIN_QUOTE
- [[#需求][需求]]
- [[#客户的实体对象和映射文件][客户的实体对象和映射文件]]
- [[#客户的dao层][客户的DAO层]]
- [[#客户的业务层][客户的业务层]]
- [[#日志文件][日志文件]]
- [[#spring配置][spring配置]]
- [[#测试业务层][测试业务层]]
- [[#添加客户页面][添加客户页面]]
- [[#webxml][web.xml]]
- [[#struts配置文件][struts配置文件]]
- [[#客户控制层][客户控制层]]
- [[#显示客户页面][显示客户页面]]
- [[#c3p0连接池参数解释][C3P0连接池参数解释]]
#+END_QUOTE

* 需求
完成显示客户和新增客户的操作:

https://raw.githubusercontent.com/Ynjxsjmh/ynjxsjmh.github.io/master/img/2019/2019-03-15-03-01.png

https://raw.githubusercontent.com/Ynjxsjmh/ynjxsjmh.github.io/master/img/2019/2019-03-15-03-02.png

项目整体实现

https://raw.githubusercontent.com/Ynjxsjmh/ynjxsjmh.github.io/master/img/2019/2019-03-15-03-03.png

* 客户的实体对象和映射文件
先写实体域

Customer.java
#+BEGIN_SRC java
package com.atcast.domain;
public class Customer {
    private Long cust_id;
    private String cust_name;
    private Long cust_user_id;
    private Long cust_create_id;
    private String cust_source;
    private String cust_industry;
    private String cust_level;
    private String cust_linkman;
    private String cust_phone;
    private String cust_mobile;
    
    public Long getCust_id() {
        return cust_id;
    }
    public void setCust_id(Long cust_id) {
        this.cust_id = cust_id;
    }
    public String getCust_name() {
        return cust_name;
    }
    public void setCust_name(String cust_name) {
        this.cust_name = cust_name;
    }
    public Long getCust_user_id() {
        return cust_user_id;
    }
    public void setCust_user_id(Long cust_user_id) {
        this.cust_user_id = cust_user_id;
    }
    public Long getCust_create_id() {
        return cust_create_id;
    }
    public void setCust_create_id(Long cust_create_id) {
        this.cust_create_id = cust_create_id;
    }
    public String getCust_source() {
        return cust_source;
    }
    public void setCust_source(String cust_source) {
        this.cust_source = cust_source;
    }
    public String getCust_industry() {
        return cust_industry;
    }
    public void setCust_industry(String cust_industry) {
        this.cust_industry = cust_industry;
    }
    public String getCust_level() {
        return cust_level;
    }
    public void setCust_level(String cust_level) {
        this.cust_level = cust_level;
    }
    public String getCust_linkman() {
        return cust_linkman;
    }
    public void setCust_linkman(String cust_linkman) {
        this.cust_linkman = cust_linkman;
    }
    public String getCust_phone() {
        return cust_phone;
    }
    public void setCust_phone(String cust_phone) {
        this.cust_phone = cust_phone;
    }
    public String getCust_mobile() {
        return cust_mobile;
    }
    public void setCust_mobile(String cust_mobile) {
        this.cust_mobile = cust_mobile;
    }
    @Override
    public String toString() {
        return "Customer [cust_id=" + cust_id + ", cust_name=" + cust_name + ", cust_user_id=" + cust_user_id
                + ", cust_create_id=" + cust_create_id + ", cust_source=" + cust_source + ", cust_industry="
                + cust_industry + ", cust_level=" + cust_level + ", cust_linkman=" + cust_linkman + ", cust_phone="
                + cust_phone + ", cust_mobile=" + cust_mobile + "]";
    }
}
#+END_SRC

CustomerDaoImpl.java
#+BEGIN_SRC java
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC 
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
   "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
    
<hibernate-mapping>
    
    <class name="com.atcast.domain.Customer" table="cst_customer">
        <id name="cust_id" column="cust_id">
            <generator class="native"/>
        </id>
        
        <property name="cust_name" column="cust_name"/>
        <property name="cust_user_id" column="cust_user_id"/>
        <property name="cust_create_id" column="cust_create_id"/>
        <property name="cust_source" column="cust_source"/>
        <property name="cust_industry" column="cust_industry"/>
        <property name="cust_level" column="cust_level"/>
        <property name="cust_linkman" column="cust_linkman"/>
        <property name="cust_phone" column="cust_phone"/>
        <property name="cust_mobile" column="cust_mobile"/>
    </class>
</hibernate-mapping>
#+END_SRC

* 客户的DAO层
接口的定义根据业务来写，一般由高层开发人员来写。

CustomerDao.java
#+BEGIN_SRC java
package com.atcast.dao;
import java.util.List;
import com.atcast.domain.Customer;
public interface CustomerDao {
    public void save(Customer customer);
    public void update(Customer customer);
    public Customer getById(Long id);
    public List<Customer> findAll();
    public List<Customer> findAllByQBC();
    public Customer loadById(long id);
}
#+END_SRC

这里一般都可以用工具自动生成...

CustomerDaoImpl.java
#+BEGIN_SRC java
package com.atcast.dao;
import java.util.List;
import org.hibernate.criterion.DetachedCriteria;
import org.springframework.orm.hibernate5.support.HibernateDaoSupport;
import com.atcast.domain.Customer;
/**
 * 持久层
 * @author Administrator
 */
public class CustomerDaoImpl extends HibernateDaoSupport implements CustomerDao {
    /**
     * 保存客户
     */
    public void save(Customer customer) {
        System.out.println("持久层：保存客户...");
        // 把数据，保存到数据库中
        this.getHibernateTemplate().save(customer);
    }

    /**
     * 修改客户
     */
    public void update(Customer customer) {
        this.getHibernateTemplate().update(customer);
    }
    
    /**
     * 通过主键，查询
     */
    public Customer getById(Long id) {
        return this.getHibernateTemplate().get(Customer.class, id);
    }

    /**
     * 查询所有
     */
    public List<Customer> findAll() {
        List<Customer> list = (List<Customer>) this.getHibernateTemplate().find("from Customer");
        return list;
    }
    
    /**
     * 查询所有的数据，使用QBC的查询
     */
    public List<Customer> findAllByQBC() {
        DetachedCriteria criteria = DetachedCriteria.forClass(Customer.class);
        // 设置查询条件
        List<Customer> list = (List<Customer>) this.getHibernateTemplate().findByCriteria(criteria);
        return list;
    }

    /**
     * 演示延迟加载
     */
    public Customer loadById(long id) {
        return this.getHibernateTemplate().load(Customer.class, id);
    }
}
#+END_SRC

* 客户的业务层
CustomerService.java
#+BEGIN_SRC java
package com.atcast.service;
import java.util.List;
import com.atcast.domain.Customer;
public interface CustomerService {
    
    public void save(Customer customer);
    
    public void update(Customer customer);
    
    public Customer getById(Long id);
    
    public List<Customer> findAll();
    
    public List<Customer> findAllByQBC();

    public Customer loadById(long id);
    
}
#+END_SRC

开发中可能还会有个日志类 LogDao 用于记录插入用户的时间等信息

CustomerServiceImpl.java
#+BEGIN_SRC java
package com.atcast.service;
import java.util.List;
import org.springframework.transaction.annotation.Transactional;
import com.atcast.dao.CustomerDao;
import com.atcast.domain.Customer;
/**
 * 客户的业务层
 * @author Administrator
 */
@Transactional
public class CustomerServiceImpl implements CustomerService {
    private CustomerDao customerDao;
    public void setCustomerDao(CustomerDao customerDao) {
        this.customerDao = customerDao;
    }
    /**
     * 保存客户
     */
    public void save(Customer customer) {
        System.out.println("业务层：保存客户...");
        customerDao.save(customer);
    }

    public void update(Customer customer) {
        customerDao.update(customer);
    }

    public Customer getById(Long id) {
        return customerDao.getById(id);
    }

    public List<Customer> findAll() {
        return customerDao.findAll();
    }
    
    public List<Customer> findAllByQBC() {
        return customerDao.findAllByQBC();
    }

    public Customer loadById(long id) {
        return customerDao.loadById(id);
    }
}
#+END_SRC

* 日志文件
log4j.properties
#+BEGIN_SRC 
 ### direct log messages to stdout ###
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target=System.err
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d{ABSOLUTE} %5p %c{1}:%L - %m%n
### direct messages to file mylog.log ###
log4j.appender.file=org.apache.log4j.FileAppender
log4j.appender.file.File=c\:mylog.log
log4j.appender.file.layout=org.apache.log4j.PatternLayout
log4j.appender.file.layout.ConversionPattern=%d{ABSOLUTE} %5p %c{1}:%L - %m%n

### set log levels - for more verbose logging change 'info' to 'debug' ###
log4j.rootLogger=info, stdout
#+END_SRC

* spring配置
applicationContext.xml
#+BEGIN_SRC nxml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop.xsd
    http://www.springframework.org/schema/tx 
    http://www.springframework.org/schema/tx/spring-tx.xsd">
    <!-- 先配置C3P0的连接池 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="com.mysql.jdbc.Driver"/>
        <property name="jdbcUrl" value="jdbc:mysql:///strutscrm"/>
        <property name="user" value="root"/>
        <property name="password" value="root"/>
    </bean>
    
    <!-- LocalSessionFactoryBean加载配置文件 -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <!-- 先加载连接池 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 加载方言，加载可选 -->
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
            </props>
        </property>
        
        <!-- 引入映射的配置文件 -->
        <property name="mappingResources">
            <list>
                <value>com/atcast/domain/Customer.hbm.xml</value>
            </list>
        </property>
    </bean>
    
    <!-- 先配置平台事务管理器 -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    
    <!-- 开启事务的注解 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
    
    <!-- 配置客户模块 -->
    <!-- 强调：以后配置Action，必须是多例的 -->
    <bean id="customerAction" class="com.atcast.web.action.CustomerAction" scope="prototype">
        <property name="customerService" ref="customerService"/>
    </bean>
    
    <bean id="customerService" class="com.atcast.service.CustomerServiceImpl">
        <property name="customerDao" ref="customerDao"/>
    </bean>
    
    <!-- 以后：Dao都需要继承HibernateDaoSupport，注入sessionFactory -->
    <bean id="customerDao" class="com.atcast.dao.CustomerDaoImpl">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
</beans>
#+END_SRC

* 测试业务层
Demo01.java
#+BEGIN_SRC java
package com.atcast.test;
import java.util.List;
import javax.annotation.Resource;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import com.atcast.domain.Customer;
import com.atcast.service.CustomerService;

/**
 * 测试Hibernate模板类的简单方法
 * @author Administrator
 */
/**
 * 测试共公类
 *在使用所有注释前必须使用@RunWith(SpringJUnit4ClassRunner.class),让测试运行于Spring测试环境
 */
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations ="classpath:applicationContext.xml")
public class Demo1 {
    //@Autowired
    @Resource(name="customerService")
    private CustomerService customerService;
    /**
     * 测试 需要Junit4.9以上
     */
    @Test
    public void testAdd(){
        Customer customer = new Customer();
        customer.setCust_id(1L);
        customer.setCust_name("测试");
        customerService.update(customer);
    }
    
    /**
     * 查询某个客户
     */
    @Test
    public void run2(){
        Customer customer = customerService.getById(2L);
        System.out.println(customer);
    }
    
    /**
     * 查询所有客户
     */
    @Test
    public void run3(){
        List<Customer> list = customerService.findAll();
        System.out.println(list);
    }
    
    /**
     * QBC查询所有的数据
     */
    @Test
    public void run4(){
        List<Customer> list = customerService.findAllByQBC();
        System.out.println(list);
    }
}
#+END_SRC

* 添加客户页面
add.jsp
#+BEGIN_SRC html
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<TITLE>添加客户</TITLE> 
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<LINK href="${pageContext.request.contextPath }/css/Style.css" type=text/css rel=stylesheet>
<LINK href="${pageContext.request.contextPath }/css/Manage.css" type=text/css
    rel=stylesheet>
<META content="MSHTML 6.00.2900.3492" name=GENERATOR>
</HEAD>
<BODY>
    <FORM id=form1 name=form1 action="${pageContext.request.contextPath }/customer_save.action" method=post>
        
        <TABLE cellSpacing=0 cellPadding=0 width="98%" border=0>
            <TBODY>
                <TR>
                    <TD width=15><IMG src="${pageContext.request.contextPath }/images/new_019.jpg"
                        border=0></TD>
                    <TD width="100%" background="${pageContext.request.contextPath }/images/new_020.jpg"
                        height=20></TD>
                    <TD width=15><IMG src="${pageContext.request.contextPath }/images/new_021.jpg"
                        border=0></TD>
                </TR>
            </TBODY>
        </TABLE>
        <TABLE cellSpacing=0 cellPadding=0 width="98%" border=0>
            <TBODY>
                <TR>
                    <TD width=15 background=${pageContext.request.contextPath }/images/new_022.jpg><IMG
                        src="${pageContext.request.contextPath }/images/new_022.jpg" border=0></TD>
                    <TD vAlign=top width="100%" bgColor=#ffffff>
                        <TABLE cellSpacing=0 cellPadding=5 width="100%" border=0>
                            <TR>
                                <TD class=manageHead>当前位置：客户管理 &gt; 添加客户</TD>
                            </TR>
                            <TR>
                                <TD height=2></TD>
                            </TR>
                        </TABLE>
            <TABLE cellSpacing=0 cellPadding=5  border=0>
                            <TR>
                                <td>客户名称：</td>
                                <td>
                                <INPUT class=textbox id=sChannel2
        style="WIDTH: 180px" maxLength=50 name="cust_name">
                                </td>
                                <td>客户级别 ：</td>
                                <td>
                                <INPUT class=textbox id=sChannel2
        style="WIDTH: 180px" maxLength=50 name="cust_level">
                                </td>
                            </TR>
                            <TR>
                                <td>信息来源 ：</td>
                                <td>
                                <INPUT class=textbox id=sChannel2
        style="WIDTH: 180px" maxLength=50 name="cust_source">
                                </td>
                                <td>联系人：</td>
                                <td>
                                <INPUT class=textbox id=sChannel2
        style="WIDTH: 180px" maxLength=50 name="cust_linkman">
                                </td>
                            </TR>
                            
                            <TR>
                                <td>固定电话 ：</td>
                                <td>
                                <INPUT class=textbox id=sChannel2
        style="WIDTH: 180px" maxLength=50 name="cust_phone">
                                </td>
                                <td>移动电话 ：</td>
                                <td>
                                <INPUT class=textbox id=sChannel2
        style="WIDTH: 180px" maxLength=50 name="cust_mobile">
                                </td>
                            </TR>
                            
                            <TR>
                                <td>联系地址 ：</td>
                                <td>
                                <INPUT class=textbox id=sChannel2
        style="WIDTH: 180px" maxLength=50 name="custAddress">
                                </td>
                                <td>邮政编码 ：</td>
                                <td>
                                <INPUT class=textbox id=sChannel2
        style="WIDTH: 180px" maxLength=50 name="custZip">
                                </td>
                            </TR>
                            <TR>
                                <td>客户传真 ：</td>
                                <td>
                                <INPUT class=textbox id=sChannel2
        style="WIDTH: 180px" maxLength=50 name="custFax">
                                </td>
                                <td>客户网址 ：</td>
                                <td>
                                <INPUT class=textbox id=sChannel2
    style="WIDTH: 180px" maxLength=50 name="custWebsite">
                                </td>
                            </TR>
                            <tr>
                                <td rowspan=2>
                <INPUT class=button id=sButton2 type=submit
                            value=" 保存 " name=sButton2>
                                </td>
                            </tr>
                        </TABLE>
                    </TD>
                    <TD width=15 background="${pageContext.request.contextPath }/images/new_023.jpg">
                    <IMG src="${pageContext.request.contextPath }/images/new_023.jpg" border=0></TD>
                </TR>
            </TBODY>
        </TABLE>
        <TABLE cellSpacing=0 cellPadding=0 width="98%" border=0>
            <TBODY>
                <TR>
                    <TD width=15><IMG src="${pageContext.request.contextPath }/images/new_024.jpg"
                        border=0></TD>
                    <TD align=middle width="100%"
                        background="${pageContext.request.contextPath }/images/new_025.jpg" height=15></TD>
                    <TD width=15><IMG src="${pageContext.request.contextPath }/images/new_026.jpg"
                        border=0></TD>
                </TR>
            </TBODY>
        </TABLE>
    </FORM>
</BODY>
</HTML>
#+END_SRC

* web.xml
web.xml
#+BEGIN_SRC nxml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns="http://java.sun.com/xml/ns/javaee"
    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
    id="WebApp_ID" version="2.5">
    <display-name>day38_ssh1</display-name>

    <!-- 配置Spring框架整合WEB的监听器 -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:applicationContext.xml</param-value>
    </context-param>

    <!-- 解决延迟加载的问题 -->
    <filter>
        <filter-name>OpenSessionInViewFilter</filter-name>
        <filter-class>org.springframework.orm.hibernate5.support.OpenSessionInViewFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>OpenSessionInViewFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    
    <!-- 配置Struts2框架的核心的过滤器 -->
    <filter>
        <filter-name>struts2</filter-name>
        <filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>struts2</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <welcome-file-list>
        <welcome-file>index.html</welcome-file>
        <welcome-file>index.htm</welcome-file>
        <welcome-file>index.jsp</welcome-file>
        <welcome-file>default.html</welcome-file>
        <welcome-file>default.htm</welcome-file>
        <welcome-file>default.jsp</welcome-file>
    </welcome-file-list>
</web-app>
#+END_SRC

* struts配置文件
struts.xml
#+BEGIN_SRC nxml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE struts PUBLIC
    "-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"
    "http://struts.apache.org/dtds/struts-2.3.dtd">
<struts>
    
    <!-- 先配置包结构 -->
    <package name="crm" extends="struts-default" namespace="/">
        <!-- 是由Struts2框架自己来管理Action -->
        <!-- <action name="customer_*" class="com.atcast.web.action.CustomerAction" method="{1}"/> -->  
        <!-- 配置客户的Action，如果Action由Spring框架来管理，class标签上只需要编写ID值就OK -->
        <action name="customer_*" class="customerAction" method="{1}">
            <result name="initAddUI">/jsp/customer/add.jsp</result>
            <result name="save" type="redirectAction">customer_save.action</result>
            <result name="findAll" type="redirectAction">customer_findAll.action</result>
            <result name="list">/jsp/customer/list.jsp</result>
        </action>   
    </package>
</struts>
#+END_SRC

* 客户控制层
CustomerAction.java
#+BEGIN_SRC java
package com.atcast.web.action;
import java.util.List;
import com.atcast.domain.Customer;
import com.atcast.service.CustomerService;
import com.opensymphony.xwork2.ActionContext;
import com.opensymphony.xwork2.ActionSupport;
import com.opensymphony.xwork2.ModelDriven;
import com.opensymphony.xwork2.util.ValueStack;
/**
 * 客户的控制层
 * @author Administrator
 */
public class CustomerAction extends ActionSupport implements ModelDriven<Customer>{
    private static final long serialVersionUID = 113695314694166436L;
    // 不要忘记手动new
    private Customer customer = new Customer();
    public Customer getModel() {
        return customer;
    }
    
    // 提供service的成员属性，提供set方法
    private CustomerService customerService;
    public void setCustomerService(CustomerService customerService) {
        this.customerService = customerService;
    }
    /**
     * 初始化到添加的页面
     * @return
     */
    public String initAddUI(){
        return "initAddUI";
    }
    
    /**
     * 保存客户的方法
     * @return
     */
    public String save(){
        System.out.println("WEB层：保存客户...");
        /*// WEB的工厂
        WebApplicationContext context = WebApplicationContextUtils.getWebApplicationContext(ServletActionContext.getServletContext());
        CustomerService cs = (CustomerService) context.getBean("customerService");
        // 调用方法
        cs.save(customer);*/
        
        customerService.save(customer);
        
        return "findAll";
    }
    
    /**
     * 查询所有的客户
     * @return
     */
    public String findAll(){
        List<Customer> list = customerService.findAll();
        ValueStack vs = ActionContext.getContext().getValueStack();
        vs.set("list", list);
        return "list";
    }
    
    /**
     * 演示的延迟加载的问题
     * @return
     */
    public String loadById(){
        Customer c = customerService.loadById(2L);
        // 打印客户的名称
        System.out.println(c.getCust_name());
        return NONE;
    }
}
#+END_SRC

* 显示客户页面
list.jsp
#+BEGIN_SRC html
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<TITLE>客户列表</TITLE> 
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<LINK href="${pageContext.request.contextPath }/css/Style.css" type=text/css rel=stylesheet>
<LINK href="${pageContext.request.contextPath }/css/Manage.css" type=text/css
    rel=stylesheet>
<script type="text/javascript" src="${pageContext.request.contextPath }/js/jquery-1.4.4.min.js"></script>

<META content="MSHTML 6.00.2900.3492" name=GENERATOR>
</HEAD>
<BODY>
    <FORM id="customerForm" name="customerForm"
        action="${pageContext.request.contextPath }/customerServlet?method=list"
        method=post>
        
    <TABLE cellSpacing=0 cellPadding=0 width="98%" border=0>
            <TBODY>
                <TR>
                    <TD width=15><IMG src="${pageContext.request.contextPath }/images/new_019.jpg"
                        border=0></TD>
                    <TD width="100%" background="${pageContext.request.contextPath }/images/new_020.jpg"
                        height=20></TD>
                    <TD width=15><IMG src="${pageContext.request.contextPath }/images/new_021.jpg"
                        border=0></TD>
                </TR>
            </TBODY>
        </TABLE>
        <TABLE cellSpacing=0 cellPadding=0 width="98%" border=0>
            <TBODY>
                <TR>
                    <TD width=15 background=${pageContext.request.contextPath }/images/new_022.jpg><IMG
                        src="${pageContext.request.contextPath }/images/new_022.jpg" border=0></TD>
                    <TD vAlign=top width="100%" bgColor=#ffffff>
                        <TABLE cellSpacing=0 cellPadding=5 width="100%" border=0>
                            <TR>
                                <TD class=manageHead>当前位置：客户管理 &gt; 客户列表</TD>
                            </TR>
                            <TR>
                                <TD height=2></TD>
                            </TR>
                        </TABLE>
        <TABLE borderColor=#cccccc cellSpacing=0 cellPadding=0
                            width="100%" align=center border=0>
                            <TBODY>
                                <TR>
                                    <TD height=25>
                                        <TABLE cellSpacing=0 cellPadding=2 border=0>
                                            <TBODY>
                                                <TR>
                                                    <TD>客户名称：</TD>
                                                    <TD><INPUT class=textbox id=sChannel2
                                                        style="WIDTH: 80px" maxLength=50 name="cust_name"></TD>
                                                    
                                                    <TD><INPUT class=button id=sButton2 type=submit
                                                        value=" 筛选 " name=sButton2></TD>
                                                </TR>
                                            </TBODY>
                                        </TABLE>
                                    </TD>
                                </TR>
                                
                                <TR>
                                    <TD>
                                        <TABLE id=grid
                                            style="BORDER-TOP-WIDTH: 0px; FONT-WEIGHT: normal; BORDER-LEFT-WIDTH: 0px; BORDER-LEFT-COLOR: #cccccc; BORDER-BOTTOM-WIDTH: 0px; BORDER-BOTTOM-COLOR: #cccccc; WIDTH: 100%; BORDER-TOP-COLOR: #cccccc; FONT-STYLE: normal; BACKGROUND-COLOR: #cccccc; BORDER-RIGHT-WIDTH: 0px; TEXT-DECORATION: none; BORDER-RIGHT-COLOR: #cccccc"
                                            cellSpacing=1 cellPadding=2 rules=all border=0>
                                            <TBODY>
                                                <TR
                                                    style="FONT-WEIGHT: bold; FONT-STYLE: normal; BACKGROUND-COLOR: #eeeeee; TEXT-DECORATION: none">
                                                    <TD>客户名称</TD>
                                                    <TD>客户级别</TD>
                                                    <TD>客户来源</TD>
                                                    <TD>联系人</TD>
                                                    <TD>电话</TD>
                                                    <TD>手机</TD>
                                                    <TD>操作</TD>
                                                </TR>
        <c:forEach items="${list }" var="customer">
                                                <TR
style="FONT-WEIGHT: normal; FONT-STYLE: normal; BACKGROUND-COLOR: white; TEXT-DECORATION: none">
                                                    <TD>${customer.cust_name }</TD>
                                                    <TD>${customer.cust_level }</TD>
                                                    <TD>${customer.cust_source }</TD>
                                                    <TD>${customer.cust_linkman }</TD>
                                                    <TD>${customer.cust_phone }</TD>
                                                    <TD>${customer.cust_mobile }</TD>
                                                    <TD>
                                                    <a href="${pageContext.request.contextPath }/customerServlet?method=edit&custId=${customer.cust_id}">修改</a>
                                                    &nbsp;&nbsp;
                                                    <a href="${pageContext.request.contextPath }/customerServlet?method=delete&custId=${customer.cust_id}">删除</a>
                                                    </TD>
                                                </TR>
                                                
                                                </c:forEach>

                                            </TBODY>
                                        </TABLE>
                                    </TD>
                                </TR>
                                
                                <TR>
                                    <TD><SPAN id=pagelink>
                                            <DIV
                                                style="LINE-HEIGHT: 20px; HEIGHT: 20px; TEXT-ALIGN: right">
                                                共[<B>${total}</B>]条记录,[<B>${totalPage}</B>]页
                                                ,每页显示
                                                <select name="pageSize">
                                                
                                                <option value="15" <c:if test="${pageSize==1 }">selected</c:if>>1</option>
                                                <option value="30" <c:if test="${pageSize==30 }">selected</c:if>>30</option>
                                                </select>
                                                条
                                                [<A href="javascript:to_page(${page-1})">前一页</A>]
                                                <B>${page}</B>
                                                [<A href="javascript:to_page(${page+1})">后一页</A>] 
                                                到
                                                <input type="text" size="3" id="page" name="page" />
                                                页
                                                
                                                <input type="button" value="Go" onclick="to_page()"/>
                                            </DIV>
                                    </SPAN></TD>
                                </TR>
                            </TBODY>
                        </TABLE>
                    </TD>
                    <TD width=15 background="${pageContext.request.contextPath }/images/new_023.jpg"><IMG
                        src="${pageContext.request.contextPath }/images/new_023.jpg" border=0></TD>
                </TR>
            </TBODY>
        </TABLE>
        <TABLE cellSpacing=0 cellPadding=0 width="98%" border=0>
            <TBODY>
                <TR>
                    <TD width=15><IMG src="${pageContext.request.contextPath }/images/new_024.jpg"
                        border=0></TD>
                    <TD align=middle width="100%"
                        background="${pageContext.request.contextPath }/images/new_025.jpg" height=15></TD>
                    <TD width=15><IMG src="${pageContext.request.contextPath }/images/new_026.jpg"
                        border=0></TD>
                </TR>
            </TBODY>
        </TABLE>
    </FORM>
</BODY>
</HTML>
#+END_SRC
* C3P0连接池参数解释
#+BEGIN_SRC nxml
<c3p0-config>
  <default-config>
 <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
 <property name="acquireIncrement">3</property>
 
 <!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
 <property name="acquireRetryAttempts">30</property>
 
 <!--两次连接中间隔时间，单位毫秒。Default: 1000 -->
 <property name="acquireRetryDelay">1000</property>
 
 <!--连接关闭时默认将所有未提交的操作回滚。Default: false -->
 <property name="autoCommitOnClose">false</property>
 
 <!--c3p0将建一张名为Test的空表，并使用其自带的查询语句进行测试。如果定义了这个参数那么
  属性preferredTestQuery将被忽略。你不能在这张Test表上进行任何操作，它将只供c3p0测试
  使用。Default: null-->
 <property name="automaticTestTable">Test</property>
 
 <!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效
  保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试
  获取连接失败后该数据源将申明已断开并永久关闭。Default: false-->
 <property name="breakAfterAcquireFailure">false</property>
 
 <!--当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将抛出
  SQLException,如设为0则无限期等待。单位毫秒。Default: 0 --> 
 <property name="checkoutTimeout">100</property>
 
 <!--通过实现ConnectionTester或QueryConnectionTester的类来测试连接。类名需制定全路径。
  Default: com.mchange.v2.c3p0.impl.DefaultConnectionTester-->
 <property name="connectionTesterClassName"></property>
 
 <!--指定c3p0 libraries的路径，如果（通常都是这样）在本地即可获得那么无需设置，默认null即可
  Default: null-->
 <property name="factoryClassLocation">null</property>
 
 <!--Strongly disrecommended. Setting this to true may lead to subtle and bizarre bugs. 
  （文档原文）作者强烈建议不使用的一个属性--> 
 <property name="forceIgnoreUnresolvedTransactions">false</property>
 
 <!--每60秒检查所有连接池中的空闲连接。Default: 0 --> 
 <property name="idleConnectionTestPeriod">60</property>
 
 <!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 --> 
 <property name="initialPoolSize">3</property>
 
 <!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
 <property name="maxIdleTime">60</property>
 
 <!--连接池中保留的最大连接数。Default: 15 -->
 <property name="maxPoolSize">15</property>
 
 <!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements
  属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。
  如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0-->
 <property name="maxStatements">100</property>
 
 <!--maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。Default: 0  -->
 <property name="maxStatementsPerConnection"></property>
 
 <!--c3p0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能
  通过多线程实现多个操作同时被执行。Default: 3--> 
 <property name="numHelperThreads">3</property>
 
 <!--当用户调用getConnection()时使root用户成为去获取连接的用户。主要用于连接池连接非c3p0
  的数据源时。Default: null--> 
 <property name="overrideDefaultUser">root</property>
 
 <!--与overrideDefaultUser参数对应使用的一个参数。Default: null-->
 <property name="overrideDefaultPassword">password</property>
 
 <!--密码。Default: null--> 
 <property name="password"></property>
 
 <!--定义所有连接测试都执行的测试语句。在使用连接测试的情况下这个一显著提高测试速度。注意：
  测试的表必须在初始数据源的时候就存在。Default: null-->
 <property name="preferredTestQuery">select id from test where id=1</property>
 
 <!--用户修改系统配置参数执行前最多等待300秒。Default: 300 --> 
 <property name="propertyCycle">300</property>
 
 <!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的
  时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable
  等方法来提升连接测试的性能。Default: false -->
 <property name="testConnectionOnCheckout">false</property>
 
 <!--如果设为true那么在取得连接的同时将校验连接的有效性。Default: false -->
 <property name="testConnectionOnCheckin">true</property>
 
 <!--用户名。Default: null-->
 <property name="user">root</property>
 
 <!--早期的c3p0版本对JDBC接口采用动态反射代理。在早期版本用途广泛的情况下这个参数
  允许用户恢复到动态反射代理以解决不稳定的故障。最新的非反射代理更快并且已经开始
  广泛的被使用，所以这个参数未必有用。现在原先的动态反射与新的非反射代理同时受到
  支持，但今后可能的版本可能不支持动态反射代理。Default: false-->
 <property name="usesTraditionalReflectiveProxies">false</property>

    <property name="automaticTestTable">con_test</property>
    <property name="checkoutTimeout">30000</property>
    <property name="idleConnectionTestPeriod">30</property>
    <property name="initialPoolSize">10</property>
    <property name="maxIdleTime">30</property>
    <property name="maxPoolSize">25</property>
    <property name="minPoolSize">10</property>
    <property name="maxStatements">0</property>
    <user-overrides user="swaldman">
    </user-overrides>
  </default-config>
  <named-config name="dumbTestConfig">
    <property name="maxStatements">200</property>
    <user-overrides user="poop">
      <property name="maxStatements">300</property>
    </user-overrides>
   </named-config>
</c3p0-config>
#+END_SRC

本章源码见 =SpringCRM02=